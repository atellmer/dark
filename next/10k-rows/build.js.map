{"version":3,"file":"build.js","mappings":"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","sources":["webpack://dark-10k-rows/../../packages/core/src/constants.ts","webpack://dark-10k-rows/../../packages/core/src/utils/utils.ts","webpack://dark-10k-rows/../../packages/core/src/platform/platform.ts","webpack://dark-10k-rows/../../packages/core/src/emitter/emitter.ts","webpack://dark-10k-rows/../../packages/core/src/scope/scope.ts","webpack://dark-10k-rows/../../packages/core/src/component/component.ts","webpack://dark-10k-rows/../../packages/core/src/view/view.ts","webpack://dark-10k-rows/../../packages/core/src/fiber/fiber.ts","webpack://dark-10k-rows/../../packages/core/src/memo/memo.ts","webpack://dark-10k-rows/../../packages/core/src/walk/walk.ts","webpack://dark-10k-rows/../../packages/core/src/scheduler/scheduler.ts","webpack://dark-10k-rows/../../packages/core/src/fragment/fragment.ts","webpack://dark-10k-rows/../../packages/core/src/use-memo/use-memo.ts","webpack://dark-10k-rows/../../packages/core/src/use-effect/use-effect.ts","webpack://dark-10k-rows/../../packages/core/src/use-layout-effect/use-layout-effect.ts","webpack://dark-10k-rows/../../packages/core/src/use-insertion-effect/use-insertion-effect.ts","webpack://dark-10k-rows/../../packages/core/src/unmount/unmount.ts","webpack://dark-10k-rows/../../packages/core/src/workloop/workloop.ts","webpack://dark-10k-rows/../../packages/core/src/atom/atom.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/factory/factory.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/factory/div.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/factory/button.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/factory/table.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/factory/tbody.ts","webpack://dark-10k-rows/../../packages/core/src/ref/ref.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/portal/portal.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/events/events.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/constants.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/dom/dom.ts","webpack://dark-10k-rows/../../packages/platform-browser/src/render/render.ts","webpack://dark-10k-rows/./index.tsx","webpack://dark-10k-rows/../../packages/platform-browser/src/create-root/create-root.tsx"],"sourcesContent":["export const VERSION = '0.25.1';\r\nexport const ROOT = 'dark:root';\r\nexport const REPLACER = 'dark:matter';\r\nexport const INDEX_KEY = 'dark:idx';\r\nexport const KEY_ATTR = 'key';\r\nexport const REF_ATTR = 'ref';\r\nexport const CREATE_EFFECT_TAG = 'C';\r\nexport const UPDATE_EFFECT_TAG = 'U';\r\nexport const DELETE_EFFECT_TAG = 'D';\r\nexport const SKIP_EFFECT_TAG = 'S';\r\nexport const INSERTION_EFFECT_HOST_MASK = 1;\r\nexport const LAYOUT_EFFECT_HOST_MASK = 2;\r\nexport const ASYNC_EFFECT_HOST_MASK = 4;\r\nexport const ATOM_HOST_MASK = 8;\r\nexport const PORTAL_HOST_MASK = 16;\r\nexport const SHADOW_MASK = 32;\r\nexport const FLUSH_MASK = 64;\r\nexport const MOVE_MASK = 128;\r\nexport const HOOK_DELIMETER = ':';\r\nexport const YIELD_INTERVAL = 6;\r\nexport const APP_STATE_ATTR = 'dark-app-state';\r\n\r\nexport enum TaskPriority {\r\n  LOW = 0,\r\n  NORMAL = 1,\r\n  HIGH = 2,\r\n}\r\n\r\nexport enum Flag {\r\n  SKIP_SCAN_OPT = '__skipScanOpt',\r\n  MEMO_SLOT_OPT = '__memoSlotOpt',\r\n  STATIC_SLOT_OPT = '__staticSlotOpt',\r\n}\r\n\r\nexport const FLAGS = {\r\n  __skipScanOpt: true,\r\n  __memoSlotOpt: true,\r\n  __staticSlotOpt: true,\r\n};\r\n\r\nexport const ATTR_BLACK_LIST = {\r\n  [KEY_ATTR]: true,\r\n  [REF_ATTR]: true,\r\n  [Flag.SKIP_SCAN_OPT]: true,\r\n  [Flag.MEMO_SLOT_OPT]: true,\r\n  [Flag.STATIC_SLOT_OPT]: true,\r\n};\r\n","import type { NestedArray } from '../shared';\r\nimport { INDEX_KEY } from '../constants';\r\n\r\nconst detectIsFunction = (o: any): o is Function => typeof o === 'function';\r\n\r\nconst detectIsUndefined = (o: any): o is undefined => typeof o === 'undefined';\r\n\r\nconst detectIsNumber = (o: any): o is number => typeof o === 'number';\r\n\r\nconst detectIsString = (o: any): o is string => typeof o === 'string';\r\n\r\nconst detectIsTextBased = (o: any): o is string | number => typeof o === 'string' || typeof o === 'number';\r\n\r\nconst detectIsObject = (o: any): o is object => typeof o === 'object';\r\n\r\nconst detectIsBoolean = (o: any): o is boolean => typeof o === 'boolean';\r\n\r\nconst detectIsArray = (o: any): o is Array<any> => Array.isArray(o);\r\n\r\nconst detectIsNull = (o: any): o is null => o === null;\r\n\r\nconst detectIsEmpty = (o: any) => detectIsNull(o) || detectIsUndefined(o);\r\n\r\nconst detectIsFalsy = (o: any) => detectIsEmpty(o) || o === false;\r\n\r\nconst getTime = () => Date.now();\r\n\r\nconst dummyFn = () => {};\r\n\r\nconst trueFn = () => true;\r\n\r\nconst falseFn = () => false;\r\n\r\nconst sameFn = <T = any>(x: T) => x;\r\n\r\nconst error = (...args: Array<any>) => !detectIsUndefined(console) && console.error(...args);\r\n\r\nfunction flatten<T = any>(source: Array<NestedArray<T>>, transform: (x: T) => any = sameFn): Array<T> {\r\n  if (detectIsArray(source)) {\r\n    if (source.length === 0) return [];\r\n  } else {\r\n    return [transform(source)];\r\n  }\r\n  const list: Array<T> = [];\r\n  const stack = [source[0]];\r\n  let idx = 0;\r\n\r\n  while (stack.length > 0) {\r\n    const x = stack.pop();\r\n\r\n    if (detectIsArray(x)) {\r\n      for (let i = x.length - 1; i >= 0; i--) {\r\n        stack.push(x[i]);\r\n      }\r\n    } else {\r\n      list.push(transform(x));\r\n\r\n      if (stack.length === 0 && idx < source.length - 1) {\r\n        idx++;\r\n        stack.push(source[idx]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nfunction keyBy<T = any>(\r\n  list: Array<T>,\r\n  fn: (o: T) => string | number,\r\n  value = false,\r\n): Record<string | number, T | boolean> {\r\n  return list.reduce((acc, x) => ((acc[fn(x)] = value ? x : true), acc), {});\r\n}\r\n\r\nfunction detectAreDepsDifferent(prevDeps: Array<unknown>, nextDeps: Array<unknown>): boolean {\r\n  if (prevDeps === nextDeps) return false;\r\n  const max = Math.max(prevDeps.length, nextDeps.length);\r\n\r\n  for (let i = 0; i < max; i++) {\r\n    if (!Object.is(prevDeps[i], nextDeps[i])) return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction nextTick(callback: () => void) {\r\n  Promise.resolve().then(callback);\r\n}\r\n\r\nconst createIndexKey = (idx: number) => `${INDEX_KEY}:${idx}`;\r\n\r\nexport {\r\n  detectIsFunction,\r\n  detectIsUndefined,\r\n  detectIsNumber,\r\n  detectIsString,\r\n  detectIsTextBased,\r\n  detectIsObject,\r\n  detectIsBoolean,\r\n  detectIsArray,\r\n  detectIsNull,\r\n  detectIsEmpty,\r\n  detectIsFalsy,\r\n  getTime,\r\n  dummyFn,\r\n  trueFn,\r\n  falseFn,\r\n  error,\r\n  flatten,\r\n  keyBy,\r\n  detectAreDepsDifferent,\r\n  nextTick,\r\n  createIndexKey,\r\n};\r\n","import { type Fiber } from '../fiber';\r\nimport { type VirtualNode } from '../view';\r\nimport { type Callback } from '../shared';\r\n\r\nexport type Platform = {\r\n  createElement: <N>(vNode: VirtualNode) => N;\r\n  insertElement: <N>(node: N, idx: number, parent: N) => void;\r\n  raf: typeof requestAnimationFrame;\r\n  caf: typeof cancelAnimationFrame;\r\n  spawn: (callback: Callback) => void;\r\n  commit: (fiber: Fiber) => void;\r\n  finishCommit: () => void;\r\n  detectIsDynamic: () => boolean;\r\n  detectIsPortal: (instance: unknown) => boolean;\r\n  unmountPortal: (fiber: Fiber) => void;\r\n  chunk: (fiber: Fiber) => void;\r\n};\r\n\r\nconst defaultRealisation = () => {\r\n  throw new Error('Function not installed by renderer!');\r\n};\r\n\r\nconst platform: Platform = {\r\n  createElement: defaultRealisation,\r\n  insertElement: defaultRealisation,\r\n  raf: defaultRealisation,\r\n  caf: defaultRealisation,\r\n  spawn: defaultRealisation,\r\n  commit: defaultRealisation,\r\n  finishCommit: defaultRealisation,\r\n  detectIsDynamic: defaultRealisation,\r\n  detectIsPortal: defaultRealisation,\r\n  unmountPortal: defaultRealisation,\r\n  chunk: defaultRealisation,\r\n};\r\n\r\nconst detectIsServer = () => !platform.detectIsDynamic();\r\n\r\nexport { platform, detectIsServer };\r\n","import { type SubscriberWithValue } from '../shared';\r\n\r\ntype EventName = 'finish' | 'chunk';\r\n\r\nclass EventEmitter<E extends string = EventName, T = unknown> {\r\n  private subscribers: Map<Partial<E>, Set<SubscriberWithValue<unknown>>> = new Map();\r\n\r\n  on<T>(e: E, fn: SubscriberWithValue<T>) {\r\n    !this.subscribers.has(e) && this.subscribers.set(e, new Set());\r\n    this.subscribers.get(e).add(fn);\r\n\r\n    return () => this.subscribers.has(e) && this.subscribers.get(e).delete(fn);\r\n  }\r\n\r\n  emit(e: E, data?: T) {\r\n    this.subscribers.has(e) && this.subscribers.get(e).forEach(x => x(data));\r\n  }\r\n\r\n  kill() {\r\n    this.subscribers = new Map();\r\n  }\r\n\r\n  __getSize() {\r\n    return this.subscribers.size;\r\n  }\r\n}\r\n\r\nexport { EventEmitter };\r\n","import type { Callback, ElementKey, AppResources, AppResource } from '../shared';\r\nimport { type SetPendingStatus } from '../start-transition';\r\nimport { platform, detectIsServer } from '../platform';\r\nimport { EventEmitter } from '../emitter';\r\nimport { type Fiber } from '../fiber';\r\n\r\nclass Scope {\r\n  private root: Fiber = null;\r\n  private wip: Fiber = null;\r\n  private cursor: Fiber = null;\r\n  private unit: Fiber = null;\r\n  private mountDeep = true;\r\n  private mountLevel = 0;\r\n  private mountNav: Record<number, number> = {};\r\n  private events: Map<string, WeakMap<object, Function>> = new Map();\r\n  private unsubs: Set<Callback> = new Set();\r\n  private actions: Actions = {};\r\n  private candidates: Set<Fiber> = new Set();\r\n  private deletions: Set<Fiber> = new Set();\r\n  private cancels: Array<Callback> = [];\r\n  private asyncEffects: Set<Callback> = new Set();\r\n  private layoutEffects: Set<Callback> = new Set();\r\n  private insertionEffects: Set<Callback> = new Set();\r\n  private resourceId = 0;\r\n  private resources: AppResources = new Map();\r\n  private defers: Array<() => Promise<unknown>> = [];\r\n  private setPendingStatus: SetPendingStatus = null;\r\n  private isLayoutEffectsZone = false;\r\n  private isInsertionEffectsZone = false;\r\n  private isUpdateZone = false;\r\n  private isBatchZone = false;\r\n  private isHydrateZone = false;\r\n  private isStreamZone = false;\r\n  private isTransitionZone = false;\r\n  private isEventZone = false;\r\n  private isHot = false;\r\n  private isDynamic = platform.detectIsDynamic();\r\n  private isServer = detectIsServer();\r\n  private emitter = new EventEmitter();\r\n\r\n  private resetActions() {\r\n    this.actions = {};\r\n  }\r\n\r\n  getActionsById(id: number) {\r\n    return this.actions[id];\r\n  }\r\n\r\n  addActionMap(id: number, map: Record<ElementKey, Fiber>) {\r\n    this.actions[id] = {\r\n      map,\r\n      replace: null,\r\n      insert: null,\r\n      remove: null,\r\n      move: null,\r\n      stable: null,\r\n    };\r\n  }\r\n\r\n  addReplaceAction(id: number, nextKey: ElementKey) {\r\n    !this.actions[id].replace && (this.actions[id].replace = {});\r\n    this.actions[id].replace[nextKey] = true;\r\n  }\r\n\r\n  addInsertAction(id: number, nextKey: ElementKey) {\r\n    !this.actions[id].insert && (this.actions[id].insert = {});\r\n    this.actions[id].insert[nextKey] = true;\r\n  }\r\n\r\n  addRemoveAction(id: number, prevKey: ElementKey) {\r\n    !this.actions[id].remove && (this.actions[id].remove = {});\r\n    this.actions[id].remove[prevKey] = true;\r\n  }\r\n\r\n  addMoveAction(id: number, nextKey: ElementKey) {\r\n    !this.actions[id].move && (this.actions[id].move = {});\r\n    this.actions[id].move[nextKey] = true;\r\n  }\r\n\r\n  addStableAction(id: number, nextKey: ElementKey) {\r\n    !this.actions[id].stable && (this.actions[id].stable = {});\r\n    this.actions[id].stable[nextKey] = true;\r\n  }\r\n\r\n  copy() {\r\n    const scope = new Scope();\r\n\r\n    scope.root = null;\r\n    scope.wip = null;\r\n    scope.cursor = null;\r\n    scope.unit = this.unit;\r\n    scope.mountDeep = this.mountDeep;\r\n    scope.mountLevel = this.mountLevel;\r\n    scope.mountNav = { ...this.mountNav };\r\n    scope.events = this.events;\r\n    scope.unsubs = this.unsubs;\r\n    scope.actions = { ...this.actions };\r\n    scope.candidates = new Set([...this.candidates]);\r\n    scope.deletions = new Set([...this.deletions]);\r\n    scope.asyncEffects = new Set([...this.asyncEffects]);\r\n    scope.layoutEffects = new Set([...this.layoutEffects]);\r\n    scope.insertionEffects = new Set([...this.insertionEffects]);\r\n    scope.isUpdateZone = this.isUpdateZone;\r\n    scope.emitter = this.emitter;\r\n\r\n    return scope;\r\n  }\r\n\r\n  getRoot() {\r\n    return this.root;\r\n  }\r\n\r\n  setRoot(fiber: Fiber) {\r\n    this.root = fiber;\r\n  }\r\n\r\n  getWorkInProgress() {\r\n    return this.wip;\r\n  }\r\n\r\n  setWorkInProgress(fiber: Fiber) {\r\n    this.wip = fiber;\r\n  }\r\n\r\n  getNextUnitOfWork() {\r\n    return this.unit;\r\n  }\r\n\r\n  setNextUnitOfWork(fiber: Fiber) {\r\n    this.unit = fiber;\r\n  }\r\n\r\n  getCursorFiber() {\r\n    return this.cursor;\r\n  }\r\n\r\n  setCursorFiber(fiber: Fiber) {\r\n    this.cursor = fiber;\r\n  }\r\n\r\n  navToChild() {\r\n    this.mountLevel = this.mountLevel + 1;\r\n    this.mountNav[this.mountLevel] = 0;\r\n  }\r\n\r\n  navToSibling() {\r\n    this.mountNav[this.mountLevel] = this.mountNav[this.mountLevel] + 1;\r\n  }\r\n\r\n  navToParent() {\r\n    this.mountLevel = this.mountLevel - 1;\r\n  }\r\n\r\n  navToPrev() {\r\n    const idx = this.getMountIndex();\r\n\r\n    if (idx === 0) {\r\n      this.navToParent();\r\n      this.setMountDeep(true);\r\n    } else {\r\n      this.mountNav[this.mountLevel] = this.mountNav[this.mountLevel] - 1;\r\n      this.setMountDeep(false);\r\n    }\r\n  }\r\n\r\n  getMountIndex() {\r\n    return this.mountNav[this.mountLevel];\r\n  }\r\n\r\n  getMountDeep() {\r\n    return this.mountDeep;\r\n  }\r\n\r\n  setMountDeep(value: boolean) {\r\n    this.mountDeep = value;\r\n  }\r\n\r\n  resetMount() {\r\n    this.mountLevel = 0;\r\n    this.mountNav = {};\r\n    this.mountDeep = true;\r\n  }\r\n\r\n  getEvents() {\r\n    return this.events;\r\n  }\r\n\r\n  addEventUnsubscriber(fn: Callback) {\r\n    this.unsubs.add(fn);\r\n  }\r\n\r\n  unsubscribeEvents() {\r\n    this.unsubs.forEach(x => x());\r\n    this.unsubs = new Set();\r\n  }\r\n\r\n  getCandidates() {\r\n    return this.candidates;\r\n  }\r\n\r\n  addCandidate(fiber: Fiber) {\r\n    this.candidates.add(fiber);\r\n  }\r\n\r\n  resetCandidates() {\r\n    this.candidates = new Set();\r\n  }\r\n\r\n  getDeletions() {\r\n    return this.deletions;\r\n  }\r\n\r\n  hasDeletion(fiber: Fiber) {\r\n    let nextFiber = fiber;\r\n\r\n    while (nextFiber) {\r\n      if (this.deletions.has(nextFiber)) return true;\r\n      nextFiber = nextFiber.parent;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  addDeletion(fiber: Fiber) {\r\n    !this.hasDeletion(fiber) && this.deletions.add(fiber);\r\n  }\r\n\r\n  resetDeletions() {\r\n    this.deletions = new Set();\r\n  }\r\n\r\n  addAsyncEffect(fn: Callback) {\r\n    this.asyncEffects.add(fn);\r\n  }\r\n\r\n  resetAsyncEffects() {\r\n    this.asyncEffects = new Set();\r\n  }\r\n\r\n  runAsyncEffects() {\r\n    if (!this.isDynamic) return;\r\n    const effects = this.asyncEffects;\r\n    effects.size > 0 && setTimeout(() => effects.forEach(fn => fn()));\r\n  }\r\n\r\n  addLayoutEffect(fn: Callback) {\r\n    this.layoutEffects.add(fn);\r\n  }\r\n\r\n  resetLayoutEffects() {\r\n    this.layoutEffects = new Set();\r\n  }\r\n\r\n  runLayoutEffects() {\r\n    if (!this.isDynamic) return;\r\n    this.setIsLayoutEffectsZone(true);\r\n    this.layoutEffects.forEach(fn => fn());\r\n    this.setIsLayoutEffectsZone(false);\r\n  }\r\n\r\n  addInsertionEffect(fn: Callback) {\r\n    this.insertionEffects.add(fn);\r\n  }\r\n\r\n  resetInsertionEffects() {\r\n    this.insertionEffects = new Set();\r\n  }\r\n\r\n  runInsertionEffects() {\r\n    if (!this.isDynamic) return;\r\n    this.setIsInsertionEffectsZone(true);\r\n    this.insertionEffects.forEach(fn => fn());\r\n    this.setIsInsertionEffectsZone(false);\r\n  }\r\n\r\n  addCancel(fn: Callback) {\r\n    this.cancels.push(fn);\r\n  }\r\n\r\n  applyCancels() {\r\n    for (let i = this.cancels.length - 1; i >= 0; i--) {\r\n      this.cancels[i]();\r\n    }\r\n  }\r\n\r\n  resetCancels() {\r\n    this.cancels = [];\r\n  }\r\n\r\n  getIsLayoutEffectsZone() {\r\n    return this.isLayoutEffectsZone;\r\n  }\r\n\r\n  setIsLayoutEffectsZone(value: boolean) {\r\n    this.isLayoutEffectsZone = value;\r\n  }\r\n\r\n  getIsInsertionEffectsZone() {\r\n    return this.isInsertionEffectsZone;\r\n  }\r\n\r\n  setIsInsertionEffectsZone(value: boolean) {\r\n    this.isInsertionEffectsZone = value;\r\n  }\r\n\r\n  getIsUpdateZone() {\r\n    return this.isUpdateZone;\r\n  }\r\n\r\n  setIsUpdateZone(value: boolean) {\r\n    this.isUpdateZone = value;\r\n  }\r\n\r\n  getIsBatchZone() {\r\n    return this.isBatchZone;\r\n  }\r\n\r\n  setIsBatchZone(value: boolean) {\r\n    this.isBatchZone = value;\r\n  }\r\n\r\n  getIsHydrateZone() {\r\n    return this.isHydrateZone;\r\n  }\r\n\r\n  setIsHydrateZone(value: boolean) {\r\n    this.isHydrateZone = value;\r\n  }\r\n\r\n  getIsStreamZone() {\r\n    return this.isStreamZone;\r\n  }\r\n\r\n  setIsStreamZone(value: boolean) {\r\n    this.isStreamZone = value;\r\n  }\r\n\r\n  getIsTransitionZone() {\r\n    return this.isTransitionZone;\r\n  }\r\n\r\n  setIsTransitionZone(value: boolean) {\r\n    this.isTransitionZone = value;\r\n  }\r\n\r\n  getIsEventZone() {\r\n    return this.isEventZone;\r\n  }\r\n\r\n  setIsEventZone(value: boolean) {\r\n    this.isEventZone = value;\r\n  }\r\n\r\n  getIsHot() {\r\n    return this.isHot;\r\n  }\r\n\r\n  setIsHot(value: boolean) {\r\n    this.isHot = value;\r\n  }\r\n\r\n  getPendingStatusSetter() {\r\n    return this.setPendingStatus;\r\n  }\r\n\r\n  setPendingStatusSetter(fn: SetPendingStatus) {\r\n    this.setPendingStatus = fn;\r\n  }\r\n\r\n  flush() {\r\n    !this.isUpdateZone && this.setRoot(this.wip); // !\r\n    this.setWorkInProgress(null);\r\n    this.setNextUnitOfWork(null);\r\n    this.setCursorFiber(null);\r\n    this.resetMount();\r\n    this.resetCandidates();\r\n    this.resetDeletions();\r\n    this.resetCancels();\r\n    this.resetInsertionEffects();\r\n    this.resetLayoutEffects();\r\n    this.resetAsyncEffects();\r\n    this.setIsHydrateZone(false);\r\n    this.setIsUpdateZone(false);\r\n    this.resetActions();\r\n  }\r\n\r\n  getEmitter() {\r\n    return this.emitter;\r\n  }\r\n\r\n  defer(fn: () => Promise<unknown>) {\r\n    this.defers.push(fn);\r\n  }\r\n\r\n  getDefers() {\r\n    return this.defers;\r\n  }\r\n\r\n  resetDefers() {\r\n    this.defers = [];\r\n  }\r\n\r\n  getResource(id: number) {\r\n    return this.resources.get(id);\r\n  }\r\n\r\n  setResource(id: number, res: AppResource) {\r\n    this.resources.set(id, res);\r\n  }\r\n\r\n  getResources() {\r\n    return this.resources;\r\n  }\r\n\r\n  getResourceId() {\r\n    return this.resourceId;\r\n  }\r\n\r\n  setResourceId(id: number) {\r\n    this.resourceId = id;\r\n  }\r\n\r\n  getNextResourceId() {\r\n    return ++this.resourceId;\r\n  }\r\n\r\n  runAfterCommit() {\r\n    this.resources = new Map();\r\n    this.isServer && (this.resourceId = 0);\r\n  }\r\n}\r\n\r\ntype Actions = Record<\r\n  number,\r\n  {\r\n    map: Record<ElementKey, Fiber>;\r\n    replace: Record<ElementKey, true>;\r\n    insert: Record<ElementKey, true>;\r\n    remove: Record<ElementKey, true>;\r\n    move: Record<ElementKey, true>;\r\n    stable: Record<ElementKey, true>;\r\n  }\r\n>;\r\n\r\nlet rootId: number = null;\r\nconst scopes = new Map<number, Scope>();\r\n\r\nconst getRootId = () => rootId;\r\n\r\nconst setRootId = (id: number) => {\r\n  rootId = id;\r\n  !scopes.has(rootId) && scopes.set(rootId, new Scope());\r\n};\r\n\r\nconst removeScope = (id: number) => scopes.delete(id);\r\n\r\nconst replaceScope = (scope: Scope, id: number = rootId) => {\r\n  Object.assign(scopes.get(id), scope);\r\n};\r\n\r\nconst $$scope = (id: number = rootId) => scopes.get(id);\r\n\r\nexport { type Scope, getRootId, setRootId, removeScope, replaceScope, $$scope };\r\n","import type { ElementKey, Instance, DarkElement, RefProps, KeyProps, FlagProps } from '../shared';\r\nimport { KEY_ATTR } from '../constants';\r\nimport { error } from '../utils';\r\nimport { type Ref } from '../ref';\r\n\r\nconst $$inject = Symbol('inject');\r\nclass Component<P extends StandardComponentProps = any, R = any> {\r\n  public type: CreateElement<P>;\r\n  public props: P;\r\n  public ref?: Ref<R>;\r\n  public token?: Symbol;\r\n  public displayName?: string;\r\n  public shouldUpdate?: ShouldUpdate<P>;\r\n  public children: Array<Instance> = [];\r\n\r\n  constructor(\r\n    type: CreateElement<P>,\r\n    token: Symbol,\r\n    props: P,\r\n    ref: Ref<R>,\r\n    shouldUpdate: ShouldUpdate<P>,\r\n    displayName: string,\r\n  ) {\r\n    this.type = type;\r\n    this.props = props;\r\n    ref && (this.ref = ref);\r\n    token && (this.token = token);\r\n    shouldUpdate && (this.shouldUpdate = shouldUpdate);\r\n    displayName && (this.displayName = displayName);\r\n  }\r\n}\r\n\r\nfunction component<P extends object, R = unknown>(type: CreateElement<P, R>, options: ComponentOptions = {}) {\r\n  const { token: $token, displayName } = options;\r\n  type Props = P & StandardComponentProps;\r\n  const factory: ComponentFactoryWithPossiblyInject<Props, R> = (props = {} as Props, ref?: Ref<R>) => {\r\n    const { token = $token, shouldUpdate } = factory[$$inject] || defaultInject;\r\n\r\n    if (props.ref) {\r\n      delete props.ref;\r\n\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        process.env.NODE_ENV === 'development' &&\r\n          error(`[Dark]: To use ref you need to wrap the component with forwardRef!`);\r\n      }\r\n    }\r\n\r\n    return new Component(type, token, props, ref, shouldUpdate, displayName);\r\n  };\r\n\r\n  return factory as ComponentFactory<Props, R>;\r\n}\r\n\r\nconst defaultInject: ComponentInject = {};\r\n\r\nconst detectIsComponent = (x: unknown): x is Component => x instanceof Component;\r\n\r\nconst getComponentKey = (x: Component): ElementKey => x.props[KEY_ATTR] ?? null;\r\n\r\nconst hasComponentFlag = (inst: Component, flag: string) => Boolean(inst.props[flag]);\r\n\r\ntype ComponentOptions = Readonly<{\r\n  displayName?: string;\r\n  token?: Symbol;\r\n}>;\r\n\r\ntype ComponentFactoryWithPossiblyInject<P extends object = {}, R = unknown> = {\r\n  (props?: P, ref?: Ref<R>): Component<P, R>;\r\n  [$$inject]?: ComponentInject<P>;\r\n};\r\n\r\ntype CreateElement<P extends StandardComponentProps, R = unknown> = (props: P, ref?: Ref<R>) => DarkElement;\r\n\r\nexport type ComponentInject<P extends object = {}> = Readonly<{\r\n  token?: Symbol;\r\n  shouldUpdate?: ShouldUpdate<P>;\r\n}>;\r\n\r\nexport type ShouldUpdate<P> = (prevProps: P, nextProps: P) => boolean;\r\n\r\nexport type StandardComponentProps = KeyProps & RefProps & FlagProps;\r\n\r\nexport type ComponentFactory<P extends object = {}, R = unknown> = (props?: P, ref?: Ref<R>) => Component<P, R>;\r\n\r\nexport { Component, component, $$inject, detectIsComponent, getComponentKey, hasComponentFlag };\r\n","import type { ElementKey, DarkElement, Instance, SlotProps, RefProps, KeyProps, FlagProps } from '../shared';\r\nimport { type Component, detectIsComponent, getComponentKey, hasComponentFlag } from '../component';\r\nimport { detectIsArray, detectIsFunction } from '../utils';\r\nimport { REPLACER, KEY_ATTR } from '../constants';\r\nimport { $$scope } from '../scope';\r\n\r\nconst $$vNode = Symbol('vNode');\r\nconst ATTR_TYPE = 'type';\r\n\r\nclass VirtualNode {\r\n  public type: NodeType = null;\r\n\r\n  constructor(type: NodeType) {\r\n    this.type = type;\r\n  }\r\n}\r\n\r\nclass TagVirtualNode extends VirtualNode {\r\n  public name: string;\r\n  public attrs: Record<string, any>;\r\n  public children: Array<TextVirtualNode | CommentVirtualNode | TagVirtualNode | VirtualNodeFactory | Component>;\r\n\r\n  constructor(name: string, attrs: TagVirtualNode['attrs'], children: TagVirtualNode['children']) {\r\n    super(NodeType.TAG);\r\n    this.name = name;\r\n    this.attrs = attrs;\r\n    this.children = children;\r\n  }\r\n}\r\n\r\nclass TextVirtualNode extends VirtualNode {\r\n  public value: string;\r\n\r\n  constructor(source: TextSource) {\r\n    super(NodeType.TEXT);\r\n    this.value = String(source);\r\n  }\r\n}\r\n\r\nclass CommentVirtualNode extends VirtualNode {\r\n  public value = '';\r\n\r\n  constructor(text: string) {\r\n    super(NodeType.COMMENT);\r\n    this.value = text;\r\n  }\r\n}\r\n\r\nfunction View(options: ViewOptions) {\r\n  const factory: TagVirtualNodeFactory = () => {\r\n    const { as: name, slot, _void = false, ...attrs } = options;\r\n    const children = (_void ? [] : detectIsArray(slot) ? slot : slot ? [slot] : []) as TagVirtualNode['children'];\r\n\r\n    return new TagVirtualNode(name, attrs, children);\r\n  };\r\n\r\n  factory[$$vNode] = true;\r\n  factory[ATTR_TYPE] = options.as;\r\n  factory[KEY_ATTR] = options.key;\r\n\r\n  return factory;\r\n}\r\n\r\nconst Text = (source: TextSource) => new TextVirtualNode(source);\r\n\r\nText.from = (source: DarkElement) => (detectIsTextVirtualNode(source) ? source.value : source + '');\r\n\r\nconst Comment = (text: string) => new CommentVirtualNode(text);\r\n\r\nconst detectIsVirtualNode = (vNode: unknown): vNode is VirtualNode => vNode instanceof VirtualNode;\r\n\r\nconst detectIsTagVirtualNode = (vNode: unknown): vNode is TagVirtualNode => vNode instanceof TagVirtualNode;\r\n\r\nconst detectIsCommentVirtualNode = (vNode: unknown): vNode is CommentVirtualNode => vNode instanceof CommentVirtualNode;\r\n\r\nconst detectIsTextVirtualNode = (vNode: unknown): vNode is TextVirtualNode => vNode instanceof TextVirtualNode;\r\n\r\nconst detectIsVirtualNodeFactory = (factory: unknown): factory is VirtualNodeFactory =>\r\n  detectIsFunction(factory) && factory[$$vNode] === true;\r\n\r\nconst getTagVirtualNodeKey = (vNode: TagVirtualNode): ElementKey | null =>\r\n  vNode.attrs ? vNode.attrs[KEY_ATTR] ?? null : null;\r\n\r\nconst hasTagVirtualNodeFlag = (vNode: TagVirtualNode, flag: string) => Boolean(vNode.attrs && vNode.attrs[flag]);\r\n\r\nconst getVirtualNodeFactoryKey = (factory: VirtualNodeFactory): ElementKey | null => factory[KEY_ATTR] ?? null;\r\n\r\nconst hasVirtualNodeFactoryFlag = (factory: VirtualNodeFactory, flag: string) => Boolean(factory[flag]);\r\n\r\nconst detectIsPlainVirtualNode = (vNode: unknown): vNode is PlainVirtualNode =>\r\n  detectIsTextVirtualNode(vNode) || detectIsCommentVirtualNode(vNode);\r\n\r\nconst createReplacer = () => new CommentVirtualNode(REPLACER);\r\n\r\nconst detectIsReplacer = (vNode: unknown) => detectIsCommentVirtualNode(vNode) && vNode.value === REPLACER;\r\n\r\nfunction getElementKey(inst: Instance): ElementKey | null {\r\n  return detectIsComponent(inst)\r\n    ? getComponentKey(inst)\r\n    : detectIsVirtualNodeFactory(inst)\r\n    ? getVirtualNodeFactoryKey(inst)\r\n    : detectIsTagVirtualNode(inst)\r\n    ? getTagVirtualNodeKey(inst)\r\n    : null;\r\n}\r\n\r\nfunction hasElementFlag(inst: Instance, flag: string) {\r\n  return detectIsComponent(inst)\r\n    ? hasComponentFlag(inst, flag)\r\n    : detectIsVirtualNodeFactory(inst)\r\n    ? hasVirtualNodeFactoryFlag(inst, flag)\r\n    : detectIsTagVirtualNode(inst)\r\n    ? hasTagVirtualNodeFlag(inst, flag)\r\n    : false;\r\n}\r\n\r\nfunction getElementType(inst: Instance): string | Function {\r\n  return detectIsComponent(inst)\r\n    ? inst.type\r\n    : detectIsVirtualNodeFactory(inst)\r\n    ? inst[ATTR_TYPE]\r\n    : detectIsTagVirtualNode(inst)\r\n    ? inst.name\r\n    : detectIsVirtualNode(inst)\r\n    ? inst.type\r\n    : null;\r\n}\r\n\r\nfunction hasChildrenProp(inst: Instance): inst is TagVirtualNode | Component {\r\n  return detectIsTagVirtualNode(inst) || detectIsComponent(inst);\r\n}\r\n\r\nfunction detectAreSameInstanceTypes(prevInst: Instance, nextInst: Instance, isComponentFactories = false) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (process.env.NODE_ENV === 'development' && $$scope().getIsHot()) {\r\n      if (detectIsComponent(prevInst) && detectIsComponent(nextInst)) {\r\n        return prevInst.displayName === nextInst.displayName;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (isComponentFactories) {\r\n    const pc = prevInst as Component;\r\n    const nc = nextInst as Component;\r\n\r\n    return pc.type === nc.type;\r\n  }\r\n\r\n  return getElementType(prevInst) === getElementType(nextInst);\r\n}\r\n\r\nfunction detectAreSameComponentTypesWithSameKeys(prevInst: Instance | null, nextInst: Instance | null) {\r\n  if (\r\n    prevInst &&\r\n    nextInst &&\r\n    detectIsComponent(prevInst) &&\r\n    detectIsComponent(nextInst) &&\r\n    detectAreSameInstanceTypes(prevInst, nextInst, true)\r\n  ) {\r\n    return getElementKey(prevInst) === getElementKey(nextInst);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\ntype TextSource = string | number;\r\n\r\nexport type VirtualNodeFactory = () => VirtualNode;\r\n\r\nexport type TagVirtualNodeFactory = () => TagVirtualNode;\r\n\r\nexport type PlainVirtualNode = TextVirtualNode | CommentVirtualNode;\r\n\r\nexport type ViewOptions = {\r\n  as: string;\r\n  _void?: boolean;\r\n  [prop: string]: any;\r\n} & Partial<SlotProps> &\r\n  RefProps &\r\n  KeyProps &\r\n  FlagProps;\r\n\r\nexport enum NodeType {\r\n  TAG = 'TAG',\r\n  TEXT = 'TEXT',\r\n  COMMENT = 'COMMENT',\r\n}\r\n\r\nexport {\r\n  View,\r\n  Text,\r\n  Comment,\r\n  VirtualNode,\r\n  TagVirtualNode,\r\n  TextVirtualNode,\r\n  CommentVirtualNode,\r\n  createReplacer,\r\n  detectIsReplacer,\r\n  getElementKey,\r\n  hasElementFlag,\r\n  getElementType,\r\n  hasChildrenProp,\r\n  detectIsVirtualNode,\r\n  detectIsTagVirtualNode,\r\n  detectIsCommentVirtualNode,\r\n  detectIsTextVirtualNode,\r\n  detectIsPlainVirtualNode,\r\n  detectIsVirtualNodeFactory,\r\n  detectAreSameInstanceTypes,\r\n  detectAreSameComponentTypesWithSameKeys,\r\n};\r\n","import { detectIsTagVirtualNode, detectIsPlainVirtualNode, detectAreSameComponentTypesWithSameKeys } from '../view';\r\nimport { type Instance, type Callback, type TimerId } from '../shared';\r\nimport { type Context, type ContextProviderValue } from '../context';\r\nimport { detectIsComponent } from '../component';\r\nimport { detectIsFunction } from '../utils';\r\nimport { type Atom } from '../atom';\r\nimport { $$scope } from '../scope';\r\n\r\nclass Fiber<N = NativeElement> {\r\n  id = 0;\r\n  cc = 0; // child fibers count\r\n  cec = 0; // child native elements count\r\n  idx = 0; // idx of fiber in the parent fiber\r\n  eidx = 0; // native element idx\r\n  mask = 0; // bit mask\r\n  element: N = null; // native element\r\n  tag: string = null; // effect tag (CREATE, UPDATE, DELETE, SKIP)\r\n  parent: Fiber<N> = null; // parent fiber\r\n  child: Fiber<N> = null; // child fiber\r\n  next: Fiber<N> = null; // next sibling fiber\r\n  alt: Fiber<N> = null; // alternate fiber (previous)\r\n  inst: Instance = null; // instance of component or virtual node\r\n  hook: Hook | null = null; // hook\r\n  provider: Map<Context, ContextProviderValue> = null; // provider of context\r\n  atoms: Map<Atom, Callback> = null;\r\n  marker: string; // for dev\r\n  batch: Batch;\r\n  catch: (error: Error) => void;\r\n\r\n  constructor(hook: Hook = null, provider: Fiber['provider'] = null, idx = 0) {\r\n    this.id = ++Fiber.nextId;\r\n    this.idx = idx;\r\n    hook && (this.hook = hook);\r\n    provider && (this.provider = provider);\r\n  }\r\n\r\n  mutate(fiber: Partial<Fiber<N>>) {\r\n    const keys = Object.keys(fiber);\r\n\r\n    for (const key of keys) {\r\n      this[key] = fiber[key];\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  markHost(mask: number) {\r\n    this.mask |= mask;\r\n    this.parent && !(this.parent.mask & mask) && this.parent.markHost(mask);\r\n  }\r\n\r\n  increment(count = 1, force = false) {\r\n    if (!this.parent) return;\r\n    const $scope = $$scope();\r\n    const isUpdateZone = $scope.getIsUpdateZone();\r\n    const wipFiber = $scope.getWorkInProgress();\r\n    const stop = isUpdateZone && wipFiber.parent === this.parent;\r\n\r\n    if (\r\n      detectIsPlainVirtualNode(this.inst) ||\r\n      (detectIsTagVirtualNode(this.inst) && this.inst.children?.length === 0)\r\n    ) {\r\n      this.cec = 1;\r\n    }\r\n\r\n    if (isUpdateZone && stop && !force) return;\r\n\r\n    this.parent.cec += count;\r\n\r\n    if (!this.parent.element) {\r\n      this.parent.increment(count);\r\n    }\r\n  }\r\n\r\n  setError(error: Error) {\r\n    if (detectIsFunction(this.catch)) {\r\n      this.catch(error);\r\n    } else if (this.parent) {\r\n      this.parent.setError(error);\r\n    }\r\n  }\r\n\r\n  static setNextId(id: number) {\r\n    Fiber.nextId = id;\r\n  }\r\n\r\n  private static nextId = 0;\r\n}\r\n\r\nclass Hook<T = any> {\r\n  id = 0;\r\n  idx = 0;\r\n  values: Array<T> = [];\r\n  owner: Fiber = null;\r\n  private static nextId = 0;\r\n\r\n  constructor() {\r\n    this.id = ++Hook.nextId;\r\n  }\r\n}\r\n\r\nfunction getHook(alt: Fiber, prevInst: Instance, nextInst: Instance): Hook | null {\r\n  if (alt && detectAreSameComponentTypesWithSameKeys(prevInst, nextInst)) return alt.hook;\r\n  if (detectIsComponent(nextInst)) return new Hook();\r\n\r\n  return null;\r\n}\r\n\r\ntype Batch = {\r\n  timer: TimerId;\r\n  changes: Array<Callback>;\r\n};\r\n\r\nexport type NativeElement = unknown;\r\nexport type HookValue<T = any> = { deps: Array<any>; value: T };\r\n\r\nexport { Fiber, Hook, getHook };\r\n","import {\r\n  type ComponentFactory,\r\n  type StandardComponentProps,\r\n  type ShouldUpdate,\r\n  type ComponentInject,\r\n  $$inject,\r\n  detectIsComponent,\r\n} from '../component';\r\nimport type { SlotProps, RefProps } from '../shared';\r\n\r\nconst $$memo = Symbol('memo');\r\n\r\nconst defaultShouldUpdate = (props: {}, nextProps: {}): boolean => {\r\n  const keys = Object.keys(nextProps);\r\n\r\n  for (const key of keys) {\r\n    if (key !== 'slot' && nextProps[key] !== props[key]) return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nfunction memo<P extends object, R = unknown>(\r\n  factory: ComponentFactory<P, R>,\r\n  shouldUpdate: ShouldUpdate<P & SlotProps> = defaultShouldUpdate,\r\n) {\r\n  type P1 = P & Omit<StandardComponentProps, 'ref'> & RefProps<R>;\r\n\r\n  factory[$$inject] = {\r\n    token: $$memo,\r\n    shouldUpdate,\r\n  } as ComponentInject<P1>;\r\n\r\n  return factory as ComponentFactory<P1, R>;\r\n}\r\n\r\nconst detectIsMemo = (instance: unknown) => detectIsComponent(instance) && instance.token === $$memo;\r\n\r\nexport { memo, detectIsMemo };\r\n","import {\r\n  DELETE_EFFECT_TAG,\r\n  UPDATE_EFFECT_TAG,\r\n  SKIP_EFFECT_TAG,\r\n  INSERTION_EFFECT_HOST_MASK,\r\n  LAYOUT_EFFECT_HOST_MASK,\r\n  ASYNC_EFFECT_HOST_MASK,\r\n  ATOM_HOST_MASK,\r\n  PORTAL_HOST_MASK,\r\n  MOVE_MASK,\r\n  HOOK_DELIMETER,\r\n} from '../constants';\r\nimport { Fiber } from '../fiber';\r\nimport { platform } from '../platform';\r\nimport { type TagVirtualNode, getElementKey, hasChildrenProp } from '../view';\r\nimport { type Scope } from '../scope';\r\nimport { type Component } from '../component';\r\nimport { detectIsMemo } from '../memo';\r\nimport { type Instance, type ElementKey } from '../shared';\r\nimport { createIndexKey } from '../utils';\r\n\r\nfunction walk<T = unknown>(fiber: Fiber<T>, onWalk: (fiber: Fiber<T>, skip: () => void, stop: () => void) => void) {\r\n  let shouldDeep = true;\r\n  let shouldStop = false;\r\n  const skip = () => (shouldDeep = false);\r\n  const stop = () => (shouldStop = true);\r\n  const stack: Array<Fiber<T>> = [fiber];\r\n\r\n  while (stack.length !== 0) {\r\n    const unit = stack.pop();\r\n\r\n    onWalk(unit, skip, stop);\r\n    if (shouldStop) break;\r\n    unit !== fiber && unit.next && stack.push(unit.next);\r\n    shouldDeep && unit.child && stack.push(unit.child);\r\n    shouldDeep = true;\r\n  }\r\n}\r\n\r\nfunction collectElements<T, P = T>(fiber: Fiber<T>, transform: (fiber: Fiber<T>) => P): Array<P> {\r\n  const elements: Array<P> = [];\r\n\r\n  walk<T>(fiber, (fiber, skip) => {\r\n    if (fiber.element) {\r\n      !platform.detectIsPortal(fiber.inst) && elements.push(transform(fiber));\r\n      return skip();\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nfunction getFiberWithElement<T1, T2 = T1>(fiber: Fiber<T1>): Fiber<T2> {\r\n  let $fiber = fiber as unknown as Fiber<T2>;\r\n\r\n  while ($fiber) {\r\n    if ($fiber.element) return $fiber;\r\n    $fiber = $fiber.parent;\r\n  }\r\n\r\n  return $fiber;\r\n}\r\n\r\nfunction detectIsFiberAlive(fiber: Fiber) {\r\n  let $fiber = fiber;\r\n\r\n  while ($fiber) {\r\n    if ($fiber.tag === DELETE_EFFECT_TAG) return false;\r\n    $fiber = $fiber.parent;\r\n  }\r\n\r\n  return Boolean(fiber);\r\n}\r\n\r\nfunction createHookLocation(rootId: number, idx: number, fiber: Fiber) {\r\n  let $fiber = fiber;\r\n  let loc = `${fiber.idx}${HOOK_DELIMETER}${idx}`;\r\n\r\n  while ($fiber) {\r\n    $fiber = $fiber.parent;\r\n    $fiber && (loc = `${$fiber.idx}.${loc}`);\r\n  }\r\n\r\n  loc = `[${rootId}]${loc}`;\r\n\r\n  return loc;\r\n}\r\n\r\nfunction detectIsStableMemoTree(fiber: Fiber, $scope: Scope) {\r\n  if (!hasChildrenProp(fiber.inst)) return;\r\n  const actions = $scope.getActionsById(fiber.id);\r\n  const children = fiber.inst.children;\r\n\r\n  for (let i = 0; i < children.length; i++) {\r\n    const inst = children[i];\r\n    const key = getElementKey(inst);\r\n    if (key === null) return false;\r\n    const alt = actions.map[key];\r\n    if (!alt) return false;\r\n    const pc = alt.inst as Component;\r\n    const nc = inst as Component;\r\n    const isStable =\r\n      detectIsMemo(nc) && detectIsMemo(pc) && nc.type === pc.type && !nc.shouldUpdate(pc.props, nc.props);\r\n\r\n    if (!isStable) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction tryOptStaticSlot(fiber: Fiber, alt: Fiber, $scope: Scope) {\r\n  const actions = $scope.getActionsById(fiber.id);\r\n  const inst = fiber.inst as Component | TagVirtualNode;\r\n\r\n  alt.element && (fiber.element = alt.element); //!\r\n\r\n  for (let i = 0; i < inst.children.length; i++) {\r\n    buildChildNode(inst.children, fiber, actions.map, i, fiber.eidx);\r\n  }\r\n\r\n  fiber.cc = inst.children.length;\r\n  $scope.setMountDeep(false);\r\n}\r\n\r\nfunction tryOptMemoSlot(fiber: Fiber, alt: Fiber, $scope: Scope) {\r\n  const actions = $scope.getActionsById(fiber.id);\r\n  const hasMove = Boolean(actions.move);\r\n  const hasRemove = Boolean(actions.remove);\r\n  const hasInsert = Boolean(actions.insert);\r\n  const hasReplace = Boolean(actions.insert);\r\n  const canOptimize = ((hasMove && !hasRemove) || (hasRemove && !hasMove)) && !hasInsert && !hasReplace;\r\n\r\n  if (!canOptimize || !detectIsStableMemoTree(fiber, $scope)) return;\r\n\r\n  hasMove && tryOptMov(fiber, alt, $scope);\r\n  hasRemove && tryOptRem(fiber, alt, $scope);\r\n}\r\n\r\nfunction tryOptMov(fiber: Fiber, alt: Fiber, $scope: Scope) {\r\n  const actions = $scope.getActionsById(fiber.id);\r\n\r\n  buildChildNodes(fiber, alt, $scope, (fiber, key) => {\r\n    if (!actions.move[key]) return;\r\n    fiber.alt = new Fiber().mutate(fiber);\r\n    fiber.tag = UPDATE_EFFECT_TAG;\r\n    fiber.mask |= MOVE_MASK;\r\n    $scope.addCandidate(fiber);\r\n  });\r\n}\r\n\r\nfunction tryOptRem(fiber: Fiber, alt: Fiber, $scope: Scope) {\r\n  buildChildNodes(fiber, alt, $scope);\r\n}\r\n\r\nfunction buildChildNodes(fiber: Fiber, alt: Fiber, $scope: Scope, onNode?: (fiber: Fiber, key: ElementKey) => void) {\r\n  const actions = $scope.getActionsById(fiber.id);\r\n  const inst = fiber.inst as Component | TagVirtualNode;\r\n  const children = inst.children;\r\n\r\n  alt.element && (fiber.element = alt.element); //!\r\n\r\n  for (let i = 0; i < children.length; i++) {\r\n    const key = getKey(children[i], i);\r\n    const $fiber = actions.map[key];\r\n\r\n    buildChildNode(children, fiber, actions.map, i, fiber.eidx);\r\n    onNode && onNode($fiber, key);\r\n  }\r\n\r\n  fiber.cc = children.length;\r\n  $scope.setMountDeep(false);\r\n}\r\n\r\nfunction buildChildNode(\r\n  children: Array<Instance>,\r\n  parent: Fiber,\r\n  altMap: Record<string, Fiber>,\r\n  idx: number,\r\n  startEidx: number,\r\n) {\r\n  const prevIdx = idx - 1;\r\n  const nextIdx = idx + 1;\r\n  const key = getKey(children[idx], idx);\r\n  const prevKey = getKey(children[prevIdx], prevIdx);\r\n  const nextKey = getKey(children[nextIdx], nextIdx);\r\n  const fiber = altMap[key];\r\n  const left = altMap[prevKey];\r\n  const right = altMap[nextKey];\r\n  const isFirst = idx === 0;\r\n  const isLast = idx === children.length - 1;\r\n\r\n  isFirst && (parent.child = fiber);\r\n  fiber.alt = null;\r\n  fiber.parent = parent;\r\n  fiber.tag = SKIP_EFFECT_TAG;\r\n  fiber.idx = idx;\r\n  left ? (fiber.eidx = left.eidx + (left.element ? 1 : left.cec)) : (fiber.eidx = startEidx);\r\n  right && (fiber.next = right);\r\n  isLast && (fiber.next = null);\r\n  notifyParents(fiber);\r\n}\r\n\r\nfunction getKey(inst: Instance, idx: number) {\r\n  const key = getElementKey(inst);\r\n  return key !== null ? key : createIndexKey(idx);\r\n}\r\n\r\nfunction notifyParents(fiber: Fiber, alt: Fiber = fiber) {\r\n  fiber.increment(alt.element ? 1 : alt.cec);\r\n  alt.mask & INSERTION_EFFECT_HOST_MASK && fiber.markHost(INSERTION_EFFECT_HOST_MASK);\r\n  alt.mask & LAYOUT_EFFECT_HOST_MASK && fiber.markHost(LAYOUT_EFFECT_HOST_MASK);\r\n  alt.mask & ASYNC_EFFECT_HOST_MASK && fiber.markHost(ASYNC_EFFECT_HOST_MASK);\r\n  alt.mask & ATOM_HOST_MASK && fiber.markHost(ATOM_HOST_MASK);\r\n  alt.mask & PORTAL_HOST_MASK && fiber.markHost(PORTAL_HOST_MASK);\r\n}\r\n\r\nexport {\r\n  walk,\r\n  collectElements,\r\n  getFiberWithElement,\r\n  detectIsFiberAlive,\r\n  createHookLocation,\r\n  tryOptStaticSlot,\r\n  tryOptMemoSlot,\r\n  notifyParents,\r\n};\r\n","import { type WorkLoop, workLoop, detectIsBusy } from '../workloop';\r\nimport { type SetPendingStatus } from '../start-transition';\r\nimport { type Callback } from '../shared';\r\nimport { type Fiber } from '../fiber';\r\nimport { ROOT, HOOK_DELIMETER, YIELD_INTERVAL, TaskPriority } from '../constants';\r\nimport { getTime, detectIsFunction, nextTick } from '../utils';\r\nimport { EventEmitter } from '../emitter';\r\nimport { platform } from '../platform';\r\n\r\nclass MessageChannel extends EventEmitter<PortEvent> {\r\n  port1: MessagePort = null;\r\n  port2: MessagePort = null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.port1 = new MessagePort(this);\r\n    this.port2 = new MessagePort(this);\r\n  }\r\n}\r\n\r\nclass MessagePort {\r\n  channel: MessageChannel;\r\n  offs: Array<Callback> = [];\r\n\r\n  constructor(channel: MessageChannel) {\r\n    this.channel = channel;\r\n  }\r\n\r\n  on(event: PortEvent, callback: PortListener) {\r\n    const off = this.channel.on(event, callback);\r\n\r\n    this.offs.push(off);\r\n  }\r\n\r\n  postMessage(value: unknown) {\r\n    platform.spawn(() => {\r\n      this.channel.emit('message', value);\r\n    });\r\n  }\r\n\r\n  unref() {\r\n    this.offs.forEach(x => x());\r\n  }\r\n}\r\n\r\nclass Scheduler {\r\n  private queue: Record<TaskPriority, Array<Task>> = {\r\n    [TaskPriority.HIGH]: [],\r\n    [TaskPriority.NORMAL]: [],\r\n    [TaskPriority.LOW]: [],\r\n  };\r\n  private deadline = 0;\r\n  private task: Task = null;\r\n  private scheduledCallback: WorkLoop = null;\r\n  private isMessageLoopRunning = false;\r\n  private channel: MessageChannel = null;\r\n  private port: MessagePort = null;\r\n\r\n  constructor() {\r\n    this.channel = new MessageChannel();\r\n    this.port = this.channel.port2;\r\n    this.channel.port1.on('message', this.performWorkUntilDeadline.bind(this));\r\n  }\r\n\r\n  reset() {\r\n    this.deadline = 0;\r\n    this.task = null;\r\n    this.scheduledCallback = null;\r\n    this.isMessageLoopRunning = false;\r\n  }\r\n\r\n  shouldYield() {\r\n    return getTime() >= this.deadline;\r\n  }\r\n\r\n  schedule(callback: Callback, options?: ScheduleCallbackOptions) {\r\n    const {\r\n      priority = TaskPriority.NORMAL,\r\n      forceAsync = false,\r\n      isTransition = false,\r\n      createLocation,\r\n      setPendingStatus,\r\n    } = options || {};\r\n    const task = new Task(callback, priority, forceAsync);\r\n\r\n    task.setIsTransition(isTransition);\r\n    task.setPendingSetter(setPendingStatus);\r\n    task.setLocationCreator(createLocation || createRootLocation);\r\n    this.put(task);\r\n    this.execute();\r\n  }\r\n\r\n  hasPrimaryTask() {\r\n    if (!this.task.getIsTransition()) return false;\r\n    const { high, normal, low } = this.getQueues();\r\n    const hasPrimary = high.length > 0 || normal.length > 0;\r\n    const hasLow = low.length > 0;\r\n\r\n    if (hasPrimary || hasLow) {\r\n      const loc = this.task.createLocation();\r\n\r\n      if (hasPrimary) {\r\n        const has = Task.detectHasRelatedUpdate(loc, high, true) || Task.detectHasRelatedUpdate(loc, normal, true);\r\n\r\n        if (has) {\r\n          this.task.markAsUnnecessary();\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      if (hasLow) {\r\n        const has = Task.detectHasRelatedUpdate(loc, low);\r\n\r\n        if (has) {\r\n          this.task.markAsUnnecessary();\r\n\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  cancelTask(fn: TaskRestorer) {\r\n    if (this.task.getIsUnnecessary()) return this.complete(this.task);\r\n    this.task.setTaskRestorer(fn);\r\n    this.defer(this.task);\r\n  }\r\n\r\n  private complete(task: Task) {\r\n    task.pending(false);\r\n  }\r\n\r\n  private put(task: Task) {\r\n    const queue = this.queue[task.getPriority()];\r\n\r\n    if (task.getIsTransition()) {\r\n      const loc = task.createLocation();\r\n      const tasks = queue.filter(x => x.createLocation() !== loc);\r\n\r\n      queue.splice(0, queue.length, ...tasks);\r\n    }\r\n\r\n    queue.push(task);\r\n  }\r\n\r\n  private pick(queue: Array<Task>) {\r\n    if (queue.length === 0) return false;\r\n    this.task = queue.shift();\r\n\r\n    if (this.task.getIsTransition() && this.task.canPending()) {\r\n      const task = this.task;\r\n\r\n      task.markAsPending();\r\n      this.defer(this.task);\r\n      this.task = null;\r\n\r\n      nextTick(() => task.pending(true));\r\n\r\n      return true;\r\n    }\r\n\r\n    this.task.run();\r\n    this.task.getForceAsync() ? this.requestCallbackAsync(workLoop) : this.requestCallback(workLoop);\r\n\r\n    return true;\r\n  }\r\n\r\n  private execute() {\r\n    const isBusy = detectIsBusy();\r\n    const { high, normal, low } = this.getQueues();\r\n\r\n    if (!isBusy && !this.isMessageLoopRunning) {\r\n      this.pick(high) || this.pick(normal) || this.pick(low);\r\n    }\r\n  }\r\n\r\n  private requestCallbackAsync(callback: WorkLoop) {\r\n    this.scheduledCallback = callback;\r\n\r\n    if (!this.isMessageLoopRunning) {\r\n      this.isMessageLoopRunning = true;\r\n      this.port.postMessage(null);\r\n    }\r\n  }\r\n\r\n  private requestCallback(callback: WorkLoop) {\r\n    callback(false);\r\n    this.task = null;\r\n    this.execute();\r\n  }\r\n\r\n  private performWorkUntilDeadline() {\r\n    if (this.scheduledCallback) {\r\n      this.deadline = getTime() + YIELD_INTERVAL;\r\n      const hasMoreWork = this.scheduledCallback(true);\r\n\r\n      if (hasMoreWork) {\r\n        this.port.postMessage(null);\r\n      } else {\r\n        if (hasMoreWork === null) {\r\n          setTimeout(() => this.port.postMessage(null)); // has promise\r\n        } else {\r\n          this.complete(this.task);\r\n          this.reset();\r\n          this.execute();\r\n        }\r\n      }\r\n    } else {\r\n      this.isMessageLoopRunning = false;\r\n    }\r\n  }\r\n\r\n  private defer(task: Task) {\r\n    const { low } = this.getQueues();\r\n\r\n    low.unshift(task);\r\n  }\r\n\r\n  private getQueues() {\r\n    const high = this.queue[TaskPriority.HIGH];\r\n    const normal = this.queue[TaskPriority.NORMAL];\r\n    const low = this.queue[TaskPriority.LOW];\r\n\r\n    return {\r\n      high,\r\n      normal,\r\n      low,\r\n    };\r\n  }\r\n}\r\n\r\ntype TaskCallback = (fn: TaskRestorer) => void;\r\ntype TaskRestorer = (options: RestoreOptions) => void;\r\ntype LocationCreator = () => string;\r\n\r\nclass Task {\r\n  private id: number;\r\n  private priority: TaskPriority;\r\n  private forceAsync: boolean;\r\n  private isTransition: boolean;\r\n  private isPending: boolean;\r\n  private isUnnecessary: boolean;\r\n  private callback: TaskCallback;\r\n  private taskRestorer?: TaskRestorer = null;\r\n  private locationCreator?: LocationCreator;\r\n  private pendingSetter?: SetPendingStatus = null;\r\n  private static nextTaskId = 0;\r\n\r\n  constructor(callback: TaskCallback, priority: TaskPriority, forceAsync: boolean) {\r\n    this.id = ++Task.nextTaskId;\r\n    this.callback = callback;\r\n    this.priority = priority;\r\n    this.forceAsync = forceAsync;\r\n  }\r\n\r\n  getPriority() {\r\n    return this.priority;\r\n  }\r\n\r\n  getForceAsync() {\r\n    return this.forceAsync;\r\n  }\r\n\r\n  setIsTransition(value: boolean) {\r\n    this.isTransition = value;\r\n  }\r\n\r\n  getIsTransition() {\r\n    return this.isTransition;\r\n  }\r\n\r\n  run() {\r\n    this.callback(this.taskRestorer);\r\n    this.taskRestorer = null;\r\n  }\r\n\r\n  pending(value: boolean) {\r\n    this.isTransition && this.pendingSetter && this.pendingSetter(value);\r\n  }\r\n\r\n  markAsPending() {\r\n    this.isPending = true;\r\n  }\r\n\r\n  canPending() {\r\n    return !this.isPending && detectIsFunction(this.pendingSetter);\r\n  }\r\n\r\n  markAsUnnecessary() {\r\n    this.isUnnecessary = true;\r\n  }\r\n\r\n  getIsUnnecessary() {\r\n    return this.isUnnecessary;\r\n  }\r\n\r\n  setTaskRestorer(fn: TaskRestorer) {\r\n    this.taskRestorer = fn;\r\n  }\r\n\r\n  setLocationCreator(fn: LocationCreator) {\r\n    this.locationCreator = fn;\r\n  }\r\n\r\n  createLocation() {\r\n    return this.locationCreator();\r\n  }\r\n\r\n  setPendingSetter(fn: SetPendingStatus) {\r\n    this.pendingSetter = fn;\r\n  }\r\n\r\n  static detectHasRelatedUpdate(loc: string, tasks: Array<Task>, deep = false) {\r\n    const [$loc] = loc.split(HOOK_DELIMETER);\r\n\r\n    return tasks.some(x => {\r\n      const $$loc = x.createLocation();\r\n      const has = $$loc === loc || (deep && $$loc.length > loc.length && $$loc.indexOf($loc) !== -1);\r\n\r\n      return has;\r\n    });\r\n  }\r\n}\r\n\r\nconst createRootLocation: LocationCreator = () => ROOT;\r\n\r\ntype PortEvent = 'message';\r\ntype PortListener = (value: unknown) => void;\r\n\r\nexport type RestoreOptions = {\r\n  fiber: Fiber;\r\n  setValue?: () => void;\r\n  resetValue?: () => void;\r\n};\r\n\r\nexport type ScheduleCallbackOptions = {\r\n  priority?: TaskPriority;\r\n  forceAsync?: boolean;\r\n  isTransition?: boolean;\r\n  createLocation?: () => string;\r\n  setPendingStatus?: SetPendingStatus;\r\n  onCompleted?: () => void;\r\n};\r\n\r\nconst scheduler = new Scheduler();\r\n\r\nexport { scheduler };\r\n","import { component, detectIsComponent } from '../component';\r\nimport type { KeyProps, SlotProps } from '../shared';\r\n\r\ntype FragmentProps = Required<SlotProps> & KeyProps;\r\n\r\nconst $$fragment = Symbol('fragment');\r\n\r\nconst Fragment = component<FragmentProps>(({ slot }) => slot || null, { token: $$fragment });\r\n\r\nconst detectIsFragment = (instance: unknown) => detectIsComponent(instance) && instance.token === $$fragment;\r\n\r\nexport { Fragment, detectIsFragment };\r\n","import { type VirtualNodeFactory, detectIsVirtualNodeFactory } from '../view';\r\nimport { type Component, detectIsComponent, component } from '../component';\r\nimport { type Hook, type HookValue } from '../fiber';\r\nimport { detectAreDepsDifferent } from '../utils';\r\nimport { $$scope } from '../scope';\r\nimport { memo } from '../memo';\r\n\r\ntype GetMemoValue = () => Component | VirtualNodeFactory;\r\n\r\ntype MemoProps = {\r\n  deps: Array<any>;\r\n  getValue: GetMemoValue;\r\n};\r\n\r\nconst Memo = memo(\r\n  component<MemoProps>(({ getValue }) => getValue()),\r\n  (p, n) => detectAreDepsDifferent(p.deps, n.deps),\r\n);\r\n\r\nfunction detectIsElement<T>(value: T) {\r\n  return detectIsComponent(value) || detectIsVirtualNodeFactory(value);\r\n}\r\n\r\nfunction useMemo<T>(getValue: () => T, deps: Array<any>): T {\r\n  const fiber = $$scope().getCursorFiber();\r\n  const { hook } = fiber;\r\n  const { idx, values } = hook as Hook<HookValue<T>>;\r\n  const state =\r\n    values[idx] ||\r\n    (values[idx] = {\r\n      deps,\r\n      value: getValue(),\r\n    });\r\n  let value: T = null;\r\n  let $value: T = null;\r\n\r\n  if (detectIsElement(state.value)) {\r\n    value = state.value;\r\n    $value = Memo({ getValue: getValue as GetMemoValue, deps }) as unknown as T;\r\n  } else {\r\n    value = detectAreDepsDifferent(state.deps, deps) ? getValue() : state.value;\r\n    $value = value;\r\n  }\r\n\r\n  state.deps = deps;\r\n  state.value = value;\r\n  hook.idx++;\r\n\r\n  return $value;\r\n}\r\n\r\nexport { useMemo };\r\n","import { detectIsFunction } from '../utils';\r\nimport { INSERTION_EFFECT_HOST_MASK, LAYOUT_EFFECT_HOST_MASK, ASYNC_EFFECT_HOST_MASK } from '../constants';\r\nimport { $$scope } from '../scope';\r\nimport { useMemo } from '../use-memo';\r\nimport { type Hook, type HookValue } from '../fiber';\r\n\r\nconst $$useEffect = Symbol('use-effect');\r\n\r\ntype UseEffectValue = {\r\n  token: Symbol;\r\n  cleanup: DropEffect;\r\n};\r\n\r\nfunction createEffect(token: Symbol, type: EffectType) {\r\n  function useEffect(effect: Effect, deps: Array<any> = [{}]) {\r\n    const $scope = $$scope();\r\n    const fiber = $scope.getCursorFiber();\r\n    const scope = useMemo<UseEffectValue>(() => ({ token, cleanup: undefined }), []);\r\n    const isInsertionEffect = type === EffectType.INSERTION;\r\n    const isLayoutEffect = type === EffectType.LAYOUT;\r\n    const isAsyncEffect = type === EffectType.ASYNC;\r\n\r\n    isInsertionEffect && fiber.markHost(INSERTION_EFFECT_HOST_MASK);\r\n    isLayoutEffect && fiber.markHost(LAYOUT_EFFECT_HOST_MASK);\r\n    isAsyncEffect && fiber.markHost(ASYNC_EFFECT_HOST_MASK);\r\n\r\n    useMemo(() => {\r\n      const runEffect = () => (scope.cleanup = effect());\r\n\r\n      isInsertionEffect && $scope.addInsertionEffect(runEffect);\r\n      isLayoutEffect && $scope.addLayoutEffect(runEffect);\r\n      isAsyncEffect && $scope.addAsyncEffect(runEffect);\r\n\r\n      detectIsFunction(scope.cleanup) && scope.cleanup();\r\n\r\n      return null;\r\n    }, deps);\r\n  }\r\n\r\n  function dropEffects(hook: Hook<HookValue<UseEffectValue>>) {\r\n    for (const { value: effect } of hook.values) {\r\n      effect && effect.token === token && detectIsFunction(effect.cleanup) && effect.cleanup();\r\n    }\r\n  }\r\n\r\n  return {\r\n    useEffect,\r\n    dropEffects,\r\n  };\r\n}\r\n\r\nexport type DropEffect = void | (() => void);\r\n\r\nexport type Effect = () => DropEffect;\r\n\r\nexport enum EffectType {\r\n  ASYNC = 'ASYNC',\r\n  LAYOUT = 'LAYOUT',\r\n  INSERTION = 'INSERTION',\r\n}\r\n\r\nconst { useEffect, dropEffects } = createEffect($$useEffect, EffectType.ASYNC);\r\n\r\nexport { useEffect, dropEffects, createEffect };\r\n","import { createEffect, EffectType } from '../use-effect';\r\n\r\nconst $$useLayoutEffect = Symbol('use-layout-effect');\r\nconst { useEffect: useLayoutEffect, dropEffects: dropLayoutEffects } = createEffect(\r\n  $$useLayoutEffect,\r\n  EffectType.LAYOUT,\r\n);\r\n\r\nexport { useLayoutEffect, dropLayoutEffects };\r\n","import { createEffect, EffectType } from '../use-effect';\r\n\r\nconst $$useInsertionEffect = Symbol('use-insertion-effect');\r\nconst { useEffect: useInsertionEffect, dropEffects: dropInsertionEffects } = createEffect(\r\n  $$useInsertionEffect,\r\n  EffectType.INSERTION,\r\n);\r\n\r\nexport { useInsertionEffect, dropInsertionEffects };\r\n","import { type Fiber } from '../fiber';\r\nimport { platform } from '../platform';\r\nimport { dropEffects } from '../use-effect';\r\nimport { dropLayoutEffects } from '../use-layout-effect';\r\nimport { dropInsertionEffects } from '../use-insertion-effect';\r\nimport { walk } from '../walk';\r\nimport { detectIsUndefined } from '../utils';\r\nimport { removeScope, $$scope } from '../scope';\r\nimport {\r\n  INSERTION_EFFECT_HOST_MASK,\r\n  LAYOUT_EFFECT_HOST_MASK,\r\n  ASYNC_EFFECT_HOST_MASK,\r\n  ATOM_HOST_MASK,\r\n  PORTAL_HOST_MASK,\r\n} from '../constants';\r\n\r\nconst combinedMask =\r\n  INSERTION_EFFECT_HOST_MASK | LAYOUT_EFFECT_HOST_MASK | ASYNC_EFFECT_HOST_MASK | ATOM_HOST_MASK | PORTAL_HOST_MASK;\r\n\r\nconst shouldUnmountFiber = (fiber: Fiber) => fiber.mask & combinedMask;\r\n\r\nfunction unmountFiber(fiber: Fiber) {\r\n  if (!shouldUnmountFiber(fiber)) return;\r\n  walk(fiber, (fiber, skip) => {\r\n    if (!shouldUnmountFiber(fiber)) return skip();\r\n\r\n    if (fiber.hook && fiber.hook.values.length > 0) {\r\n      fiber.mask & INSERTION_EFFECT_HOST_MASK && dropInsertionEffects(fiber.hook);\r\n      fiber.mask & LAYOUT_EFFECT_HOST_MASK && dropLayoutEffects(fiber.hook);\r\n      fiber.mask & ASYNC_EFFECT_HOST_MASK && dropEffects(fiber.hook);\r\n    }\r\n\r\n    if (fiber.atoms) {\r\n      for (const [_, cleanup] of fiber.atoms) {\r\n        cleanup();\r\n      }\r\n      fiber.atoms = null;\r\n    }\r\n\r\n    fiber.mask & PORTAL_HOST_MASK && platform.unmountPortal(fiber);\r\n  });\r\n}\r\n\r\nfunction unmountRoot(rootId: number, onCompleted: () => void) {\r\n  if (detectIsUndefined(rootId)) return;\r\n  const $scope = $$scope(rootId);\r\n\r\n  unmountFiber($scope.getRoot());\r\n  $scope.unsubscribeEvents();\r\n  removeScope(rootId);\r\n  onCompleted();\r\n}\r\n\r\nexport { unmountFiber, unmountRoot };\r\n","import { platform } from '../platform';\r\nimport {\r\n  CREATE_EFFECT_TAG,\r\n  UPDATE_EFFECT_TAG,\r\n  DELETE_EFFECT_TAG,\r\n  SKIP_EFFECT_TAG,\r\n  INSERTION_EFFECT_HOST_MASK,\r\n  LAYOUT_EFFECT_HOST_MASK,\r\n  ASYNC_EFFECT_HOST_MASK,\r\n  ATOM_HOST_MASK,\r\n  PORTAL_HOST_MASK,\r\n  MOVE_MASK,\r\n  FLUSH_MASK,\r\n  SHADOW_MASK,\r\n  Flag,\r\n} from '../constants';\r\nimport {\r\n  flatten,\r\n  error,\r\n  detectIsEmpty,\r\n  detectIsFalsy,\r\n  detectIsArray,\r\n  detectIsFunction,\r\n  detectIsTextBased,\r\n  createIndexKey,\r\n  trueFn,\r\n} from '../utils';\r\nimport { type Scope, setRootId, $$scope, replaceScope } from '../scope';\r\nimport { type Component, detectIsComponent } from '../component';\r\nimport { type ElementKey, type Instance } from '../shared';\r\nimport { Fiber, getHook, Hook } from '../fiber';\r\nimport {\r\n  Text,\r\n  detectIsVirtualNode,\r\n  detectIsVirtualNodeFactory,\r\n  getElementKey,\r\n  hasElementFlag,\r\n  hasChildrenProp,\r\n  detectIsReplacer,\r\n  createReplacer,\r\n  detectAreSameInstanceTypes,\r\n} from '../view';\r\nimport { detectIsMemo } from '../memo';\r\nimport {\r\n  walk,\r\n  getFiberWithElement,\r\n  detectIsFiberAlive,\r\n  notifyParents,\r\n  tryOptStaticSlot,\r\n  tryOptMemoSlot,\r\n} from '../walk';\r\nimport { type RestoreOptions, scheduler } from '../scheduler';\r\nimport { Fragment, detectIsFragment } from '../fragment';\r\nimport { unmountFiber } from '../unmount';\r\n\r\nlet hasPendingPromise = false;\r\nlet hasRenderError = false;\r\n\r\nexport type WorkLoop = (isAsync: boolean) => boolean;\r\n\r\nfunction workLoop(isAsync: boolean): boolean | null {\r\n  if (hasPendingPromise) return null;\r\n  if (hasRenderError) return false;\r\n  const $scope = $$scope();\r\n  const wipFiber = $scope.getWorkInProgress();\r\n  let unit = $scope.getNextUnitOfWork();\r\n  let shouldYield = false;\r\n  let hasMoreWork = Boolean(unit);\r\n\r\n  try {\r\n    while (unit && !shouldYield) {\r\n      unit = performUnitOfWork(unit, $scope);\r\n      $scope.setNextUnitOfWork(unit);\r\n      hasMoreWork = Boolean(unit);\r\n      shouldYield = isAsync && scheduler.shouldYield();\r\n      if (shouldYield && scheduler.hasPrimaryTask()) return fork($scope);\r\n    }\r\n\r\n    if (!unit && wipFiber) {\r\n      commit($scope);\r\n    }\r\n  } catch (err) {\r\n    if (err instanceof Promise) {\r\n      hasPendingPromise = true;\r\n      err.finally(() => {\r\n        hasPendingPromise = false;\r\n        !isAsync && workLoop(false);\r\n      });\r\n    } else {\r\n      hasRenderError = true;\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  return hasMoreWork;\r\n}\r\n\r\nfunction performUnitOfWork(fiber: Fiber, $scope: Scope): Fiber | null {\r\n  const wipFiber = $scope.getWorkInProgress();\r\n  const isDeepWalking = $scope.getMountDeep();\r\n  const isStream = $scope.getIsStreamZone();\r\n  const hasChildren = isDeepWalking && hasChildrenProp(fiber.inst) && fiber.inst.children.length > 0;\r\n\r\n  fiber.hook && (fiber.hook.idx = 0);\r\n\r\n  if (hasChildren) {\r\n    const child = mountChild(fiber, $scope);\r\n\r\n    isStream && platform.chunk(child);\r\n\r\n    return child;\r\n  } else {\r\n    while (fiber.parent && fiber !== wipFiber) {\r\n      const next = mountSibling(fiber, $scope);\r\n\r\n      isStream && platform.chunk(fiber);\r\n\r\n      if (next) {\r\n        isStream && platform.chunk(next);\r\n        return next;\r\n      }\r\n\r\n      fiber = fiber.parent;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction mountChild(parent: Fiber, $scope: Scope) {\r\n  $scope.navToChild();\r\n  const $inst = parent.inst;\r\n  const idx = 0;\r\n  const inst = hasChildrenProp($inst) ? $inst.children[idx] : null;\r\n  const alt = getAlternate(parent, inst, true, $scope);\r\n  const fiber = createFiber(alt, inst, idx);\r\n\r\n  fiber.parent = parent;\r\n  parent.child = fiber;\r\n  fiber.eidx = parent.element ? 0 : parent.eidx;\r\n\r\n  share(fiber, parent, inst, $scope);\r\n\r\n  return fiber;\r\n}\r\n\r\nfunction mountSibling(left: Fiber, $scope: Scope) {\r\n  $scope.navToSibling();\r\n  const $inst = left.parent.inst;\r\n  const idx = $scope.getMountIndex();\r\n  const inst = hasChildrenProp($inst) && $inst.children ? $inst.children[idx] : null;\r\n  const hasSibling = Boolean(inst);\r\n\r\n  if (!hasSibling) {\r\n    $scope.navToParent();\r\n    $scope.setMountDeep(false);\r\n\r\n    return null;\r\n  }\r\n\r\n  $scope.setMountDeep(true);\r\n  const alt = getAlternate(left, inst, false, $scope);\r\n  const fiber = createFiber(alt, inst, idx);\r\n\r\n  fiber.parent = left.parent;\r\n  left.next = fiber;\r\n  fiber.eidx = left.eidx + (left.element ? 1 : left.cec);\r\n\r\n  share(fiber, left, inst, $scope);\r\n\r\n  return fiber;\r\n}\r\n\r\nfunction share(fiber: Fiber, prev: Fiber, inst: Instance, $scope: Scope) {\r\n  const { alt } = fiber;\r\n  const shouldMount = alt && detectIsMemo(inst) ? shouldUpdate(fiber, inst, $scope) : true;\r\n\r\n  $scope.setCursorFiber(fiber);\r\n  fiber.inst = inst;\r\n\r\n  if (alt && alt.mask & MOVE_MASK) {\r\n    fiber.mask |= MOVE_MASK;\r\n    alt.mask &= ~MOVE_MASK;\r\n  }\r\n\r\n  fiber.hook && (fiber.hook.owner = fiber); // !\r\n\r\n  if (shouldMount) {\r\n    fiber.inst = mount(fiber, prev, $scope);\r\n    alt && reconcile(fiber, alt, $scope);\r\n    setup(fiber, alt);\r\n  } else if (fiber.mask & MOVE_MASK) {\r\n    fiber.tag = UPDATE_EFFECT_TAG;\r\n  }\r\n\r\n  $scope.addCandidate(fiber); // !\r\n}\r\n\r\nfunction createFiber(alt: Fiber, inst: Instance, idx: number) {\r\n  const fiber = new Fiber(getHook(alt, alt ? alt.inst : null, inst), alt ? alt.provider : null, idx);\r\n\r\n  fiber.alt = alt || null;\r\n\r\n  return fiber;\r\n}\r\n\r\nfunction getAlternate(fiber: Fiber, inst: Instance, fromChild: boolean, $scope: Scope) {\r\n  const key = getElementKey(inst);\r\n\r\n  if (key !== null) {\r\n    const parentId = fromChild ? fiber.id : fiber.parent.id;\r\n    const actions = $scope.getActionsById(parentId);\r\n\r\n    if (actions) {\r\n      const isMove = actions.move && Boolean(actions.move[key]);\r\n      const isStable = actions.stable && Boolean(actions.stable[key]);\r\n\r\n      if (isMove || isStable) {\r\n        const alt = actions.map[key];\r\n\r\n        isMove && (alt.mask |= MOVE_MASK);\r\n\r\n        return alt;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  const alt = fiber.alt ? (fromChild ? fiber.alt.child || null : fiber.alt.next || null) : null;\r\n\r\n  return alt;\r\n}\r\n\r\nfunction reconcile(fiber: Fiber, alt: Fiber, $scope: Scope) {\r\n  const { id, inst } = fiber;\r\n  const areSameTypes = detectAreSameInstanceTypes(alt.inst, inst);\r\n\r\n  if (!areSameTypes) {\r\n    $scope.addDeletion(alt);\r\n  } else if (hasChildrenProp(alt.inst) && hasChildrenProp(inst) && alt.cc !== 0) {\r\n    const hasSameCount = alt.cc === inst.children.length;\r\n    const check = hasElementFlag(inst, Flag.SKIP_SCAN_OPT) ? !hasSameCount : true;\r\n\r\n    if (check) {\r\n      const { prevKeys, nextKeys, prevKeysMap, nextKeysMap, keyedFibersMap } = extractKeys(alt.child, inst.children);\r\n      const flush = nextKeys.length === 0;\r\n      let size = Math.max(prevKeys.length, nextKeys.length);\r\n      let p = 0;\r\n      let n = 0;\r\n\r\n      $scope.addActionMap(id, keyedFibersMap);\r\n\r\n      for (let i = 0; i < size; i++) {\r\n        const nextKey = nextKeys[i - n] ?? null;\r\n        const prevKey = prevKeys[i - p] ?? null;\r\n        const prevKeyFiber = keyedFibersMap[prevKey] || null;\r\n\r\n        if (nextKey !== prevKey) {\r\n          if (nextKey !== null && !prevKeysMap[nextKey]) {\r\n            if (prevKey !== null && !nextKeysMap[prevKey]) {\r\n              $scope.addReplaceAction(id, nextKey);\r\n              $scope.addDeletion(prevKeyFiber);\r\n            } else {\r\n              $scope.addInsertAction(id, nextKey);\r\n              p++;\r\n              size++;\r\n            }\r\n          } else if (!nextKeysMap[prevKey]) {\r\n            $scope.addRemoveAction(id, prevKey);\r\n            $scope.addDeletion(prevKeyFiber);\r\n            flush && (prevKeyFiber.mask |= FLUSH_MASK);\r\n            n++;\r\n            size++;\r\n          } else if (nextKeysMap[prevKey] && nextKeysMap[nextKey]) {\r\n            $scope.addMoveAction(id, nextKey);\r\n          }\r\n        } else if (nextKey !== null) {\r\n          $scope.addStableAction(id, nextKey);\r\n        }\r\n      }\r\n\r\n      hasElementFlag(inst, Flag.STATIC_SLOT_OPT) && tryOptStaticSlot(fiber, alt, $scope);\r\n      hasElementFlag(inst, Flag.MEMO_SLOT_OPT) && tryOptMemoSlot(fiber, alt, $scope);\r\n    }\r\n  }\r\n}\r\n\r\nfunction setup(fiber: Fiber, alt: Fiber) {\r\n  const inst = fiber.inst;\r\n  let isUpdate = false;\r\n\r\n  fiber.parent.tag === CREATE_EFFECT_TAG && (fiber.tag = fiber.parent.tag);\r\n  fiber.parent.mask & SHADOW_MASK && !fiber.parent.element && !detectIsReplacer(inst) && (fiber.mask |= SHADOW_MASK);\r\n  isUpdate =\r\n    alt &&\r\n    fiber.tag !== CREATE_EFFECT_TAG &&\r\n    detectAreSameInstanceTypes(alt.inst, inst) &&\r\n    getElementKey(alt.inst) === getElementKey(inst);\r\n  isUpdate && !fiber.element && alt.element && (fiber.element = alt.element);\r\n  fiber.tag = isUpdate ? UPDATE_EFFECT_TAG : CREATE_EFFECT_TAG;\r\n  hasChildrenProp(fiber.inst) && (fiber.cc = fiber.inst.children.length);\r\n  !fiber.element && detectIsVirtualNode(fiber.inst) && (fiber.element = platform.createElement(fiber.inst));\r\n  fiber.element && fiber.increment();\r\n}\r\n\r\nfunction shouldUpdate(fiber: Fiber, inst: Instance, $scope: Scope) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if ($scope.getIsHot()) return true;\r\n  }\r\n\r\n  const alt = fiber.alt;\r\n  const pc = alt.inst as Component;\r\n  const nc = inst as Component;\r\n\r\n  if (nc.type !== pc.type || nc.shouldUpdate(pc.props, nc.props)) return true;\r\n\r\n  $scope.setMountDeep(false);\r\n  fiber.tag = SKIP_EFFECT_TAG;\r\n  fiber.child = alt.child;\r\n  fiber.child.parent = fiber;\r\n  fiber.hook = alt.hook;\r\n  fiber.cc = alt.cc;\r\n  fiber.cec = alt.cec;\r\n  alt.element && (fiber.element = alt.element);\r\n  alt.provider && (fiber.provider = alt.provider);\r\n  alt.catch && (fiber.catch = alt.catch);\r\n  alt.atoms && (fiber.atoms = alt.atoms);\r\n\r\n  const diff = fiber.eidx - alt.eidx;\r\n  const deep = diff !== 0;\r\n\r\n  if (deep) {\r\n    walk(fiber.child, ($fiber, skip) => {\r\n      $fiber.eidx += diff;\r\n      if ($fiber.element) return skip();\r\n    });\r\n  }\r\n\r\n  notifyParents(fiber, alt);\r\n\r\n  return false;\r\n}\r\n\r\nfunction mount(fiber: Fiber, prev: Fiber, $scope: Scope) {\r\n  let inst = fiber.inst;\r\n  const isComponent = detectIsComponent(inst);\r\n  const component = inst as Component;\r\n\r\n  if (isComponent) {\r\n    try {\r\n      const id = $scope.getResourceId();\r\n      let result = component.type(component.props, component.ref);\r\n      const defers = $scope.getDefers();\r\n\r\n      if (defers.length > 0) {\r\n        const promise = Promise.all(defers.map(x => x()));\r\n\r\n        $scope.setResourceId(id);\r\n        $scope.resetDefers();\r\n        $scope.navToPrev();\r\n        $scope.setNextUnitOfWork(prev);\r\n        Fiber.setNextId(prev.id);\r\n\r\n        throw promise;\r\n      }\r\n\r\n      if (detectIsArray(result)) {\r\n        !detectIsFragment(component) && (result = Fragment({ slot: result }));\r\n      } else if (detectIsTextBased(result)) {\r\n        result = Text(result);\r\n      }\r\n\r\n      component.children = result as Array<Instance>;\r\n      platform.detectIsPortal(inst) && fiber.markHost(PORTAL_HOST_MASK);\r\n    } catch (err) {\r\n      if (err instanceof Promise) throw err;\r\n      component.children = [];\r\n      fiber.setError(err);\r\n      error(err);\r\n    }\r\n  } else if (detectIsVirtualNodeFactory(inst)) {\r\n    inst = inst();\r\n  }\r\n\r\n  if (hasChildrenProp(inst)) {\r\n    inst.children = flatten(inst.children, x => (detectIsTextBased(x) ? Text(x) : x || supportConditional(x)));\r\n    isComponent && component.children.length === 0 && component.children.push(createReplacer());\r\n  }\r\n\r\n  return inst;\r\n}\r\n\r\nfunction extractKeys(alt: Fiber, children: Array<Instance>) {\r\n  let nextFiber = alt;\r\n  let idx = 0;\r\n  const prevKeys: Array<ElementKey> = [];\r\n  const nextKeys: Array<ElementKey> = [];\r\n  const prevKeysMap: Record<ElementKey, boolean> = {};\r\n  const nextKeysMap: Record<ElementKey, boolean> = {};\r\n  const keyedFibersMap: Record<ElementKey, Fiber> = {};\r\n  const usedKeysMap: Record<ElementKey, boolean> = {};\r\n\r\n  while (nextFiber || idx < children.length) {\r\n    if (nextFiber) {\r\n      const key = getElementKey(nextFiber.inst);\r\n      const prevKey = detectIsEmpty(key) ? createIndexKey(idx) : key;\r\n\r\n      if (!prevKeysMap[prevKey]) {\r\n        prevKeysMap[prevKey] = true; // !\r\n        prevKeys.push(prevKey);\r\n      }\r\n\r\n      keyedFibersMap[prevKey] = nextFiber;\r\n    }\r\n\r\n    if (children[idx]) {\r\n      const inst = children[idx];\r\n      const key = getElementKey(inst);\r\n      const nextKey = detectIsEmpty(key) ? createIndexKey(idx) : key;\r\n\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (usedKeysMap[nextKey]) {\r\n          error(`[Dark]: The key of node [${nextKey}] already has been used!`, [inst]);\r\n        }\r\n      }\r\n\r\n      if (!nextKeysMap[nextKey]) {\r\n        nextKeysMap[nextKey] = true; // !\r\n        nextKeys.push(nextKey);\r\n      }\r\n\r\n      usedKeysMap[nextKey] = true;\r\n    }\r\n\r\n    nextFiber = nextFiber ? nextFiber.next : null;\r\n    idx++;\r\n  }\r\n\r\n  return {\r\n    prevKeys,\r\n    nextKeys,\r\n    prevKeysMap,\r\n    nextKeysMap,\r\n    keyedFibersMap,\r\n  };\r\n}\r\n\r\nfunction supportConditional(inst: Instance) {\r\n  return detectIsFalsy(inst) ? createReplacer() : inst;\r\n}\r\n\r\nfunction commit($scope: Scope) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    process.env.NODE_ENV === 'development' && $scope.setIsHot(false);\r\n  }\r\n\r\n  const wipFiber = $scope.getWorkInProgress();\r\n  const deletions = $scope.getDeletions();\r\n  const candidates = $scope.getCandidates();\r\n  const isUpdateZone = $scope.getIsUpdateZone();\r\n  const unmounts: Array<Fiber> = [];\r\n  const combinedMask = INSERTION_EFFECT_HOST_MASK | LAYOUT_EFFECT_HOST_MASK | ASYNC_EFFECT_HOST_MASK | PORTAL_HOST_MASK;\r\n\r\n  // !\r\n  for (const fiber of deletions) {\r\n    const withNextTick = fiber.mask & ATOM_HOST_MASK && !(fiber.mask & combinedMask);\r\n\r\n    withNextTick ? unmounts.push(fiber) : unmountFiber(fiber);\r\n    fiber.tag = DELETE_EFFECT_TAG;\r\n    platform.commit(fiber);\r\n  }\r\n\r\n  isUpdateZone && sync(wipFiber);\r\n  $scope.runInsertionEffects();\r\n\r\n  for (const fiber of candidates) {\r\n    fiber.tag !== SKIP_EFFECT_TAG && platform.commit(fiber);\r\n    fiber.alt = null;\r\n    hasChildrenProp(fiber.inst) && (fiber.inst.children = null);\r\n  }\r\n\r\n  wipFiber.alt = null;\r\n  platform.finishCommit(); // !\r\n  $scope.runLayoutEffects();\r\n  $scope.runAsyncEffects();\r\n  unmounts.length > 0 && setTimeout(() => unmounts.forEach(x => unmountFiber(x)));\r\n  flush($scope);\r\n}\r\n\r\nfunction flush($scope: Scope, cancel = false) {\r\n  $scope.flush();\r\n  !cancel && $scope.getEmitter().emit('finish');\r\n  $scope.runAfterCommit(); // !\r\n}\r\n\r\nfunction sync(fiber: Fiber) {\r\n  const diff = fiber.cec - fiber.alt.cec;\r\n  if (diff === 0) return;\r\n  const parentFiber = getFiberWithElement(fiber.parent);\r\n  let isRight = false;\r\n\r\n  fiber.increment(diff, true);\r\n\r\n  walk(parentFiber.child, ($fiber, skip) => {\r\n    if ($fiber === fiber) {\r\n      isRight = true;\r\n      return skip();\r\n    }\r\n\r\n    $fiber.element && skip();\r\n    isRight && ($fiber.eidx += diff);\r\n  });\r\n}\r\n\r\nfunction fork($scope: Scope): false {\r\n  const $$scope$ = $scope.copy();\r\n  const wipFiber = $scope.getWorkInProgress();\r\n  const child = wipFiber.child;\r\n  child && (child.parent = null);\r\n  const restore = (options: RestoreOptions) => {\r\n    const { fiber: wipFiber, setValue, resetValue } = options;\r\n    const $scope = $$scope();\r\n\r\n    detectIsFunction(setValue) && setValue();\r\n    detectIsFunction(resetValue) && $$scope$.addCancel(resetValue);\r\n\r\n    wipFiber.alt = new Fiber().mutate(wipFiber);\r\n    wipFiber.tag = UPDATE_EFFECT_TAG;\r\n    wipFiber.child = child;\r\n    child && (child.parent = wipFiber);\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      wipFiber.marker = '✌️';\r\n    }\r\n\r\n    $$scope$.setRoot($scope.getRoot());\r\n    $$scope$.setWorkInProgress(wipFiber);\r\n    replaceScope($$scope$);\r\n  };\r\n\r\n  wipFiber.child = wipFiber.alt.child;\r\n  wipFiber.alt = null;\r\n  $scope.applyCancels();\r\n  flush($scope, true);\r\n  scheduler.cancelTask(restore);\r\n\r\n  return false;\r\n}\r\n\r\nexport type CreateUpdateOptions = {\r\n  rootId: number;\r\n  isTransition?: boolean;\r\n  hook: Hook;\r\n  createChanger?: () => UpdateChanger;\r\n};\r\n\r\nexport type UpdateChanger = {\r\n  shouldUpdate: () => boolean;\r\n} & Pick<RestoreOptions, 'setValue' | 'resetValue'>;\r\n\r\nfunction createUpdate(options: CreateUpdateOptions) {\r\n  const { rootId, hook, isTransition, createChanger = $createChanger } = options;\r\n  const callback = (restore?: (options: RestoreOptions) => void) => {\r\n    setRootId(rootId); // !\r\n    const fromRestore = detectIsFunction(restore);\r\n    const { shouldUpdate, setValue, resetValue } = createChanger();\r\n    const $scope = $$scope();\r\n    const owner = hook.owner;\r\n    const fiber = owner.alt || owner;\r\n\r\n    if (!shouldUpdate() || !detectIsFiberAlive(fiber) || fromRestore) {\r\n      fromRestore && restore({ fiber, setValue, resetValue });\r\n      return;\r\n    }\r\n\r\n    detectIsFunction(setValue) && setValue();\r\n    detectIsFunction(resetValue) && isTransition && $scope.addCancel(resetValue);\r\n\r\n    fiber.alt = new Fiber().mutate(fiber);\r\n    fiber.tag = UPDATE_EFFECT_TAG;\r\n    fiber.cc = 0;\r\n    fiber.cec = 0;\r\n    fiber.child = null;\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      fiber.marker = '🔥';\r\n    }\r\n\r\n    $scope.setIsUpdateZone(true);\r\n    $scope.resetMount();\r\n    $scope.setWorkInProgress(fiber);\r\n    $scope.setCursorFiber(fiber);\r\n    fiber.inst = mount(fiber, null, $scope);\r\n    $scope.setNextUnitOfWork(fiber);\r\n  };\r\n\r\n  return callback;\r\n}\r\n\r\nconst $createChanger = (): UpdateChanger => ({\r\n  shouldUpdate: trueFn,\r\n  setValue: null,\r\n  resetValue: null,\r\n});\r\n\r\nconst detectIsBusy = () => Boolean($$scope()?.getWorkInProgress());\r\n\r\nexport { Fiber, workLoop, createUpdate, detectIsBusy };\r\n","import { detectIsFunction, detectIsEmpty, detectAreDepsDifferent, trueFn, error } from '../utils';\r\nimport { useLayoutEffect } from '../use-layout-effect';\r\nimport { type SubscriberWithValue } from '../shared';\r\nimport { ATOM_HOST_MASK } from '../constants';\r\nimport { $$scope, getRootId } from '../scope';\r\nimport { createUpdate } from '../workloop';\r\nimport { useUpdate } from '../use-update';\r\nimport { EventEmitter } from '../emitter';\r\nimport { scheduler } from '../scheduler';\r\nimport { useMemo } from '../use-memo';\r\nimport { type Hook } from '../fiber';\r\nimport { batch } from '../batch';\r\n\r\nclass Atom<T = unknown> {\r\n  private value: T;\r\n  private connections1: Map<Hook, Tuple<T>>;\r\n  private connections2: Map<T, Tuple<T>>;\r\n  private subjects: Set<ReadableAtom>;\r\n  private emitter: EventEmitter<'data', EmitterValue<T>>;\r\n\r\n  constructor(value: T) {\r\n    this.value = value;\r\n  }\r\n\r\n  val(fn?: ShouldUpdate<T>, key?: T) {\r\n    try {\r\n      this.__connect(fn, key);\r\n    } catch (err) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        error('[Dark]: Illegal invocation atom.val() outside render process!');\r\n      }\r\n    }\r\n\r\n    return this.value;\r\n  }\r\n\r\n  get() {\r\n    return this.value;\r\n  }\r\n\r\n  on(fn: SubscriberWithValue<EmitterValue<T>>) {\r\n    !this.emitter && (this.emitter = new EventEmitter());\r\n\r\n    return this.emitter.on('data', fn);\r\n  }\r\n\r\n  kill() {\r\n    if (this.connections1) {\r\n      for (const [hook, [_, __, ___, key]] of this.connections1) {\r\n        this.off(hook, key);\r\n      }\r\n    }\r\n\r\n    if (this.connections2) {\r\n      for (const [key, [_, hook]] of this.connections2) {\r\n        this.off(hook, key);\r\n      }\r\n    }\r\n\r\n    this.connections1 = null;\r\n    this.connections2 = null;\r\n    this.emitter = null;\r\n    this.subjects = null;\r\n  }\r\n\r\n  toString() {\r\n    return String(this.value);\r\n  }\r\n\r\n  toJSON() {\r\n    return this.value;\r\n  }\r\n\r\n  valueOf() {\r\n    return this.value;\r\n  }\r\n\r\n  __connect(fn: ShouldUpdate<T>, key: T) {\r\n    const rootId = getRootId();\r\n    const fiber = $$scope().getCursorFiber();\r\n    const { hook } = fiber;\r\n    const disconnect = () => this.off(hook, key);\r\n\r\n    !fiber.atoms && (fiber.atoms = new Map());\r\n    fiber.atoms.set(this, disconnect);\r\n    fiber.markHost(ATOM_HOST_MASK);\r\n\r\n    if (detectIsEmpty(key)) {\r\n      !this.connections1 && (this.connections1 = new Map());\r\n      this.connections1.set(hook, [rootId, hook, fn, key]);\r\n    } else {\r\n      !this.connections2 && (this.connections2 = new Map());\r\n      this.connections2.set(key, [rootId, hook, fn, key]);\r\n    }\r\n\r\n    return disconnect;\r\n  }\r\n\r\n  __addSubject(atom$: ReadableAtom) {\r\n    !this.subjects && (this.subjects = new Set());\r\n    this.subjects.add(atom$);\r\n  }\r\n\r\n  __removeSubject(atom$: ReadableAtom) {\r\n    return this.subjects && this.subjects.delete(atom$);\r\n  }\r\n\r\n  __getSize() {\r\n    const size1 = this.connections1 ? this.connections1.size : 0;\r\n    const size2 = this.connections2 ? this.connections2.size : 0;\r\n    const size3 = this.subjects ? this.subjects.size : 0;\r\n    const size4 = this.emitter ? this.emitter.__getSize() : 0;\r\n\r\n    return size1 + size2 + size3 + size4;\r\n  }\r\n\r\n  protected setValue(value: T | ((prevValue: T) => T)) {\r\n    const prev = this.value;\r\n    const next = detectIsFunction(value) ? value(this.value) : value;\r\n    const data: EmitterValue<T> = { prev, next };\r\n    const make = (tuple: Tuple<T>, prev: T, next: T) => {\r\n      const [rootId, hook, shouldUpdate, key] = tuple;\r\n      const fn = shouldUpdate || trueFn;\r\n\r\n      fn(prev, next, key) && scheduler.schedule(createUpdate({ rootId, hook }));\r\n    };\r\n\r\n    this.value = next;\r\n\r\n    if (this.connections1) {\r\n      for (const [_, tuple] of this.connections1) {\r\n        make(tuple, prev, next);\r\n      }\r\n    }\r\n\r\n    if (this.connections2) {\r\n      if (this.connections2.has(next)) {\r\n        make(this.connections2.get(next), prev, next);\r\n        this.connections2.has(prev) && make(this.connections2.get(prev), prev, next);\r\n      }\r\n    }\r\n\r\n    this.emitter && this.emitter.emit('data', data);\r\n    this.subjects && this.subjects.forEach(x => x.__notify());\r\n  }\r\n\r\n  private off(hook: Hook, key: T) {\r\n    hook.owner.atoms.delete(this);\r\n    this.connections1 && this.connections1.delete(hook);\r\n    this.connections2 && this.connections2.delete(key);\r\n  }\r\n}\r\n\r\nclass WritableAtom<T = unknown> extends Atom<T> {\r\n  set(value: T | ((prevValue: T) => T)) {\r\n    super.setValue(value);\r\n  }\r\n}\r\n\r\nclass ReadableAtom<T = unknown> extends Atom<T> {\r\n  private deps$: Array<Atom> = [];\r\n  private fn: ComputedFn<T> = null;\r\n  private values: Array<unknown> = [];\r\n\r\n  constructor(deps$: Array<Atom>, fn: ComputedFn<T>) {\r\n    const values = ReadableAtom.values(deps$);\r\n\r\n    super(ReadableAtom.compute(fn, values));\r\n    this.deps$ = deps$;\r\n    this.fn = fn;\r\n    this.values = values;\r\n    deps$.forEach(x => x.__addSubject(this));\r\n  }\r\n\r\n  __notify() {\r\n    const values = ReadableAtom.values(this.deps$);\r\n\r\n    if (detectAreDepsDifferent(this.values, values)) {\r\n      super.setValue(ReadableAtom.compute(this.fn, values));\r\n    }\r\n\r\n    this.values = values;\r\n  }\r\n\r\n  override kill() {\r\n    super.kill();\r\n    this.deps$.forEach(x => x.__removeSubject(this));\r\n    this.deps$ = [];\r\n    this.fn = null;\r\n  }\r\n\r\n  private static compute(fn: Function, values: Array<unknown>) {\r\n    return fn(...values);\r\n  }\r\n\r\n  private static values(deps$: Array<Atom>) {\r\n    return deps$.map(x => x.get());\r\n  }\r\n}\r\n\r\nconst detectIsAtom = (x: unknown): x is Atom => x instanceof Atom;\r\n\r\nconst detectIsWritableAtom = (x: unknown): x is WritableAtom => x instanceof WritableAtom;\r\n\r\nconst detectIsReadableAtom = (x: unknown): x is ReadableAtom => x instanceof ReadableAtom;\r\n\r\nconst atom = <T>(value?: T) => new WritableAtom(value);\r\n\r\nconst computed = <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\r\n  deps$: [\r\n    Atom<A>,\r\n    Atom<B>?,\r\n    Atom<C>?,\r\n    Atom<D>?,\r\n    Atom<E>?,\r\n    Atom<F>?,\r\n    Atom<G>?,\r\n    Atom<H>?,\r\n    Atom<I>?,\r\n    Atom<J>?,\r\n    Atom<K>?,\r\n    Atom<L>?,\r\n    Atom<M>?,\r\n    Atom<N>?,\r\n  ],\r\n  fn: ComputedFn<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N>,\r\n) => new ReadableAtom(deps$, fn) as ReadableAtom<ReturnType<typeof fn>>;\r\n\r\nfunction useAtom<T>(value?: T): WritableAtom<T> {\r\n  const atom$ = useMemo(() => atom<T>(value), []);\r\n\r\n  useLayoutEffect(() => () => atom$.kill(), []);\r\n\r\n  return atom$;\r\n}\r\n\r\nfunction useComputed<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\r\n  deps$: [\r\n    Atom<A>,\r\n    Atom<B>?,\r\n    Atom<C>?,\r\n    Atom<D>?,\r\n    Atom<E>?,\r\n    Atom<F>?,\r\n    Atom<G>?,\r\n    Atom<H>?,\r\n    Atom<I>?,\r\n    Atom<J>?,\r\n    Atom<K>?,\r\n    Atom<L>?,\r\n    Atom<M>?,\r\n    Atom<N>?,\r\n  ],\r\n  fn: ComputedFn<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N>,\r\n) {\r\n  const atom$ = useMemo(() => computed(deps$, fn), []);\r\n\r\n  useLayoutEffect(() => () => atom$.kill(), []);\r\n\r\n  return atom$;\r\n}\r\n\r\nfunction useStore<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\r\n  atoms$: [\r\n    Atom<A>,\r\n    Atom<B>?,\r\n    Atom<C>?,\r\n    Atom<D>?,\r\n    Atom<E>?,\r\n    Atom<F>?,\r\n    Atom<G>?,\r\n    Atom<H>?,\r\n    Atom<I>?,\r\n    Atom<J>?,\r\n    Atom<K>?,\r\n    Atom<L>?,\r\n    Atom<M>?,\r\n    Atom<N>?,\r\n  ],\r\n) {\r\n  const forceUpdate = useUpdate();\r\n  const update = () => batch(forceUpdate);\r\n\r\n  useLayoutEffect(() => {\r\n    const offs = atoms$.map(x => x.on(update));\r\n\r\n    return () => offs.forEach(x => x());\r\n  }, [...atoms$]);\r\n\r\n  return atoms$.map(x => x.get()) as [A, B, C, D, E, F, G, H, I, J, K, L, M, N];\r\n}\r\n\r\ntype ShouldUpdate<T> = (p: T, n: T, key?: T) => boolean;\r\ntype EmitterValue<T> = { prev: T; next: T };\r\ntype Tuple<T> = [number, Hook, ShouldUpdate<T>, T];\r\ntype ComputedFn<\r\n  T,\r\n  A = unknown,\r\n  B = unknown,\r\n  C = unknown,\r\n  D = unknown,\r\n  E = unknown,\r\n  F = unknown,\r\n  G = unknown,\r\n  H = unknown,\r\n  I = unknown,\r\n  J = unknown,\r\n  K = unknown,\r\n  L = unknown,\r\n  M = unknown,\r\n  N = unknown,\r\n> = (a: A, b?: B, c?: C, d?: D, e?: E, f?: F, g?: G, h?: H, i?: I, j?: J, k?: K, l?: L, m?: M, n?: N) => T;\r\n\r\nexport {\r\n  type Atom,\r\n  WritableAtom,\r\n  ReadableAtom,\r\n  detectIsAtom,\r\n  detectIsWritableAtom,\r\n  detectIsReadableAtom,\r\n  atom,\r\n  computed,\r\n  useAtom,\r\n  useComputed,\r\n  useStore,\r\n};\r\n","import { View, type ViewOptions } from '@dark-engine/core';\r\n\r\ntype TagProps = Omit<ViewOptions, 'as' | 'isVoid'>;\r\n\r\nexport const factory =\r\n  (as: string) =>\r\n  (props: TagProps = {}) => {\r\n    props.as = as;\r\n    return View(props as ViewOptions);\r\n  };\r\n","import { factory } from './factory';\r\n\r\nexport const div = factory('div');\r\n","import { factory } from './factory';\r\n\r\nexport const button = factory('button');\r\n","import { factory } from './factory';\r\n\r\nexport const table = factory('table');\r\n","import { factory } from './factory';\r\n\r\nexport const tbody = factory('tbody');\r\n","import { detectIsObject, detectIsNull, detectIsFunction } from '../utils';\r\nimport type { Component, ComponentFactory } from '../component';\r\nimport type { RefProps, KeyProps, FlagProps } from '../shared';\r\nimport { useMemo } from '../use-memo';\r\n\r\nfunction forwardRef<P extends object, R>(\r\n  component: ComponentFactory<P, R>,\r\n): ComponentFactory<P & RefProps<R> & KeyProps & FlagProps, R> {\r\n  type Props = P & RefProps<R>;\r\n\r\n  return (props: Props) => {\r\n    const { ref, ...rest } = (props || {}) as Props;\r\n\r\n    return component(rest as P, ref) as Component<P, R>;\r\n  };\r\n}\r\n\r\nfunction detectIsMutableRef(ref: unknown): ref is MutableRef {\r\n  if (!detectIsObject(ref) || detectIsNull(ref)) return false;\r\n  const mutableRef = ref as MutableRef;\r\n\r\n  for (const key in mutableRef) {\r\n    if (key === 'current' && mutableRef.hasOwnProperty(key)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction applyRef<T>(ref: Ref<T>, current: T) {\r\n  if (detectIsFunction(ref)) {\r\n    ref(current);\r\n  } else if (detectIsMutableRef(ref)) {\r\n    ref.current = current;\r\n  }\r\n}\r\n\r\nfunction useRef<T>(initialValue: T = null): MutableRef<T> {\r\n  const ref = useMemo(() => ({ current: initialValue }), []) as MutableRef<T>;\r\n\r\n  return ref;\r\n}\r\n\r\nexport type MutableRef<T = unknown> = {\r\n  current: T;\r\n};\r\n\r\nexport type FunctionRef<T = unknown> = (ref: T) => void;\r\n\r\nexport type Ref<T = unknown> = MutableRef<T> | FunctionRef<T>;\r\n\r\nexport { forwardRef, detectIsMutableRef, applyRef, useRef };\r\n","import { type DarkElement, type Fiber, component, useMemo, $$scope, detectIsComponent } from '@dark-engine/core';\r\n\r\nimport type { TagNativeElement } from '../native-element';\r\n\r\nconst $$portal = Symbol('portal');\r\n\r\nfunction createPortal(slot: DarkElement, container: TagNativeElement) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (!(container instanceof Element)) {\r\n      throw new Error(`[Dark]: createPortal receives only Element as container!`);\r\n    }\r\n  }\r\n\r\n  return Portal({ container, slot });\r\n}\r\n\r\ntype PortalProps = {\r\n  container: TagNativeElement;\r\n  slot: DarkElement;\r\n};\r\n\r\nconst Portal = component<PortalProps>(\r\n  props => {\r\n    const element = props.container;\r\n    const fiber = $$scope().getCursorFiber();\r\n\r\n    useMemo(() => (element.innerHTML = ''), []);\r\n\r\n    fiber.element = element;\r\n    props.container = null;\r\n\r\n    return props.slot;\r\n  },\r\n  { token: $$portal },\r\n);\r\n\r\nconst detectIsPortal = (instance: unknown) => detectIsComponent(instance) && instance.token === $$portal;\r\n\r\nconst getPortalContainer = (fiber: Fiber<TagNativeElement>): TagNativeElement | null =>\r\n  detectIsPortal(fiber.inst) ? fiber.element : null;\r\n\r\nfunction unmountPortal(fiber: Fiber<TagNativeElement>) {\r\n  const element = getPortalContainer(fiber);\r\n\r\n  element && (element.innerHTML = '');\r\n}\r\n\r\nexport { createPortal, unmountPortal, detectIsPortal };\r\n","import { detectIsFunction, $$scope, detectIsArray } from '@dark-engine/core';\r\n\r\nimport type { TagNativeElement } from '../native-element';\r\n\r\ntype BrowserEventConstructor = (type: string, event: Event) => void;\r\n\r\nclass SyntheticEvent<E extends Event, T = TagNativeElement> {\r\n  public type = '';\r\n  public sourceEvent: E = null;\r\n  public target: T = null;\r\n  private propagation = true;\r\n\r\n  constructor(options: Pick<SyntheticEvent<E, T>, 'sourceEvent' | 'target'>) {\r\n    this.type = options.sourceEvent.type;\r\n    this.sourceEvent = options.sourceEvent;\r\n    this.target = options.target;\r\n  }\r\n\r\n  public stopPropagation() {\r\n    this.propagation = false;\r\n    this.sourceEvent.stopPropagation();\r\n  }\r\n\r\n  public preventDefault() {\r\n    this.sourceEvent.preventDefault();\r\n  }\r\n\r\n  public getPropagation() {\r\n    return this.propagation;\r\n  }\r\n}\r\n\r\nfunction delegateEvent(\r\n  target: Element,\r\n  eventName: string,\r\n  handler: (e: Event) => void | [fn: () => void, ...args: Array<any>],\r\n) {\r\n  const $scope = $$scope();\r\n  const eventsMap = $scope.getEvents();\r\n  const handlersMap = eventsMap.get(eventName);\r\n  const $handler = detectIsArray(handler) ? (e: Event) => handler[0](...handler.slice(1), e) : handler;\r\n\r\n  if (!handlersMap) {\r\n    const rootHandler = (event: Event) => {\r\n      const handler = eventsMap.get(eventName).get(event.target);\r\n      const target = event.target as TagNativeElement;\r\n      let $event: SyntheticEvent<Event> = null;\r\n\r\n      if (detectIsFunction(handler)) {\r\n        $event = new SyntheticEvent({ sourceEvent: event, target });\r\n\r\n        $scope.setIsEventZone(true);\r\n        handler($event);\r\n        $scope.setIsEventZone(false);\r\n      }\r\n\r\n      if (target.parentElement) {\r\n        const shouldPropagate = $event ? $event.getPropagation() : true;\r\n\r\n        if (shouldPropagate) {\r\n          const constructor = event.constructor as BrowserEventConstructor;\r\n\r\n          target.parentElement.dispatchEvent(new constructor(event.type, event));\r\n        }\r\n      }\r\n    };\r\n\r\n    eventsMap.set(eventName, new WeakMap([[target, $handler]]));\r\n    document.addEventListener(eventName, rootHandler, true);\r\n    $scope.addEventUnsubscriber(() => document.removeEventListener(eventName, rootHandler, true));\r\n  } else {\r\n    handlersMap.set(target, $handler);\r\n  }\r\n}\r\n\r\nconst detectIsEvent = (attrName: string) => attrName.startsWith('on');\r\n\r\nconst getEventName = (attrName: string) => attrName.slice(2, attrName.length).toLowerCase();\r\n\r\nexport { SyntheticEvent, delegateEvent, detectIsEvent, getEventName };\r\n","export const VERSION = '0.25.1';\r\nexport const STYLE_ATTR = 'style';\r\nexport const CLASS_ATTR = 'class';\r\nexport const CLASS_NAME_ATTR = 'className';\r\nexport const EXCLUDE_ATTR_MARK = '$';\r\n","import {\r\n  type Fiber,\r\n  type VirtualNode,\r\n  type TagVirtualNode,\r\n  type TextVirtualNode,\r\n  type CommentVirtualNode,\r\n  type PlainVirtualNode,\r\n  type Callback,\r\n  REF_ATTR,\r\n  ATTR_BLACK_LIST,\r\n  CREATE_EFFECT_TAG,\r\n  UPDATE_EFFECT_TAG,\r\n  DELETE_EFFECT_TAG,\r\n  SKIP_EFFECT_TAG,\r\n  MOVE_MASK,\r\n  FLUSH_MASK,\r\n  SHADOW_MASK,\r\n  detectIsUndefined,\r\n  detectIsBoolean,\r\n  detectIsObject,\r\n  NodeType,\r\n  detectIsTagVirtualNode,\r\n  detectIsTextVirtualNode,\r\n  detectIsPlainVirtualNode,\r\n  getFiberWithElement,\r\n  collectElements,\r\n  walk,\r\n  dummyFn,\r\n  $$scope,\r\n  applyRef,\r\n} from '@dark-engine/core';\r\n\r\nimport { detectIsPortal } from '../portal';\r\nimport { delegateEvent, detectIsEvent, getEventName } from '../events';\r\nimport { STYLE_ATTR, CLASS_ATTR, CLASS_NAME_ATTR, EXCLUDE_ATTR_MARK } from '../constants';\r\nimport type {\r\n  NativeElement,\r\n  TagNativeElement,\r\n  TextNativeElement,\r\n  CommentNativeElement,\r\n  NativeNode,\r\n  AttributeValue,\r\n} from '../native-element';\r\n\r\nlet moves: Array<Callback> = [];\r\nlet patches: Array<Callback> = [];\r\nlet trackUpdate: (nativeElement: NativeElement) => void = null;\r\nconst svgTagNames = new Set([\r\n  'svg',\r\n  'animate',\r\n  'animateMotion',\r\n  'animateTransform',\r\n  'circle',\r\n  'clipPath',\r\n  'defs',\r\n  'desc',\r\n  'ellipse',\r\n  'feBlend',\r\n  'feColorMatrix',\r\n  'feComponentTransfer',\r\n  'feComposite',\r\n  'feConvolveMatrix',\r\n  'feDiffuseLighting',\r\n  'feDisplacementMap',\r\n  'feDistantLight',\r\n  'feDropShadow',\r\n  'feFlood',\r\n  'feFuncA',\r\n  'feFuncB',\r\n  'feFuncG',\r\n  'feFuncR',\r\n  'feGaussianBlur',\r\n  'feImage',\r\n  'feMerge',\r\n  'feMergeNode',\r\n  'feMorphology',\r\n  'feOffset',\r\n  'fePointLight',\r\n  'feSpecularLighting',\r\n  'feSpotLight',\r\n  'feTile',\r\n  'feTurbulence',\r\n  'filter',\r\n  'foreignObject',\r\n  'g',\r\n  'image',\r\n  'line',\r\n  'linearGradient',\r\n  'marker',\r\n  'mask',\r\n  'metadata',\r\n  'mpath',\r\n  'path',\r\n  'pattern',\r\n  'polygon',\r\n  'polyline',\r\n  'radialGradient',\r\n  'rect',\r\n  'stop',\r\n  'switch',\r\n  'symbol',\r\n  'text',\r\n  'textPath',\r\n  'tspan',\r\n  'use',\r\n  'view',\r\n]);\r\nconst voidTagNames = new Set([\r\n  'area',\r\n  'base',\r\n  'br',\r\n  'col',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr',\r\n]);\r\n\r\nconst createNativeElementMap = {\r\n  [NodeType.TAG]: (vNode: VirtualNode): TagNativeElement => {\r\n    const tagNode = vNode as TagVirtualNode;\r\n    const name = tagNode.name;\r\n\r\n    return detectIsSvgElement(name)\r\n      ? document.createElementNS('http://www.w3.org/2000/svg', name)\r\n      : document.createElement(name);\r\n  },\r\n  [NodeType.TEXT]: (vNode: VirtualNode): TextNativeElement => {\r\n    return document.createTextNode((vNode as TextVirtualNode).value);\r\n  },\r\n  [NodeType.COMMENT]: (vNode: VirtualNode): CommentNativeElement => {\r\n    return document.createComment((vNode as CommentVirtualNode).value);\r\n  },\r\n};\r\n\r\nfunction createNativeElement(node: VirtualNode): NativeElement {\r\n  return createNativeElementMap[node.type](node);\r\n}\r\n\r\nfunction detectIsSvgElement(name: string) {\r\n  return svgTagNames.has(name);\r\n}\r\n\r\nfunction detectIsVoidElement(name: string) {\r\n  return voidTagNames.has(name);\r\n}\r\n\r\nfunction setObjectStyle(element: TagNativeElement, style: object) {\r\n  const keys = Object.keys(style);\r\n\r\n  for (const key of keys) {\r\n    element.style.setProperty(key, String(style[key]));\r\n  }\r\n}\r\n\r\nfunction addAttributes(element: NativeElement, node: TagVirtualNode, isHydrateZone: boolean) {\r\n  const attrNames = Object.keys(node.attrs);\r\n  const tagElement = element as TagNativeElement;\r\n\r\n  for (const attrName of attrNames) {\r\n    const attrValue = node.attrs[attrName];\r\n\r\n    if (attrName[0] === EXCLUDE_ATTR_MARK) continue;\r\n\r\n    if (attrName === REF_ATTR) {\r\n      applyRef(attrValue, element);\r\n      continue;\r\n    }\r\n\r\n    if (attrName === CLASS_ATTR || attrName === CLASS_NAME_ATTR) {\r\n      toggleAttribute(tagElement, CLASS_ATTR, attrValue);\r\n      continue;\r\n    }\r\n\r\n    if (attrName === STYLE_ATTR && attrValue && detectIsObject(attrValue)) {\r\n      setObjectStyle(tagElement, attrValue);\r\n      continue;\r\n    }\r\n\r\n    if (detectIsEvent(attrName)) {\r\n      delegateEvent(tagElement, getEventName(attrName), attrValue);\r\n    } else if (!isHydrateZone && !detectIsUndefined(attrValue) && !ATTR_BLACK_LIST[attrName]) {\r\n      const stop = patchProperties({\r\n        tagName: node.name,\r\n        element: tagElement,\r\n        attrValue,\r\n        attrName,\r\n      });\r\n\r\n      !stop && tagElement.setAttribute(attrName, attrValue);\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateAttributes(element: NativeElement, prevNode: TagVirtualNode, nextNode: TagVirtualNode) {\r\n  const attrNames = getAttributeNames(prevNode, nextNode);\r\n  const tagElement = element as TagNativeElement;\r\n\r\n  for (const attrName of attrNames) {\r\n    const prevAttrValue = prevNode.attrs[attrName];\r\n    const nextAttrValue = nextNode.attrs[attrName];\r\n\r\n    if (attrName[0] === EXCLUDE_ATTR_MARK) continue;\r\n\r\n    if (attrName === REF_ATTR) {\r\n      applyRef(prevAttrValue, element);\r\n      continue;\r\n    }\r\n\r\n    if ((attrName === CLASS_ATTR || attrName === CLASS_NAME_ATTR) && prevAttrValue !== nextAttrValue) {\r\n      toggleAttribute(tagElement, CLASS_ATTR, nextAttrValue);\r\n      continue;\r\n    }\r\n\r\n    if (attrName === STYLE_ATTR && nextAttrValue && prevAttrValue !== nextAttrValue && detectIsObject(nextAttrValue)) {\r\n      setObjectStyle(tagElement, nextAttrValue);\r\n      continue;\r\n    }\r\n\r\n    if (!detectIsUndefined(nextAttrValue)) {\r\n      if (detectIsEvent(attrName)) {\r\n        prevAttrValue !== nextAttrValue && delegateEvent(tagElement, getEventName(attrName), nextAttrValue);\r\n      } else if (!ATTR_BLACK_LIST[attrName] && prevAttrValue !== nextAttrValue) {\r\n        const stop = patchProperties({\r\n          tagName: nextNode.name,\r\n          element: tagElement,\r\n          attrValue: nextAttrValue,\r\n          attrName,\r\n        });\r\n\r\n        !stop && tagElement.setAttribute(attrName, nextAttrValue);\r\n      }\r\n    } else {\r\n      tagElement.removeAttribute(attrName);\r\n    }\r\n  }\r\n}\r\n\r\nfunction toggleAttribute(element: TagNativeElement, name: string, value: string) {\r\n  value ? element.setAttribute(name, value) : element.removeAttribute(name);\r\n}\r\n\r\nfunction getAttributeNames(prevNode: TagVirtualNode, nextNode: TagVirtualNode) {\r\n  const attrNames = new Set<string>();\r\n  const prevAttrs = Object.keys(prevNode.attrs);\r\n  const nextAttrs = Object.keys(nextNode.attrs);\r\n  const size = Math.max(prevAttrs.length, nextAttrs.length);\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    attrNames.add(prevAttrs[i] || nextAttrs[i]);\r\n  }\r\n\r\n  return attrNames;\r\n}\r\n\r\ntype PatchPropertiesOptions = {\r\n  tagName: string;\r\n  element: TagNativeElement;\r\n  attrName: string;\r\n  attrValue: AttributeValue;\r\n};\r\n\r\nfunction patchProperties(options: PatchPropertiesOptions): boolean {\r\n  const { tagName, element, attrName, attrValue } = options;\r\n  const fn = patchPropertiesSpecialCasesMap[tagName];\r\n  let stop = fn ? fn(element, attrName, attrValue) : false;\r\n\r\n  if (canSetProperty(element, attrName)) {\r\n    element[attrName] = attrValue;\r\n  }\r\n\r\n  if (!stop && detectIsBoolean(attrValue)) {\r\n    stop = !attrName.includes('-');\r\n  }\r\n\r\n  return stop;\r\n}\r\n\r\nfunction canSetProperty(element: TagNativeElement, key: string) {\r\n  const prototype = Object.getPrototypeOf(element);\r\n  const descriptor = Object.getOwnPropertyDescriptor(prototype, key);\r\n\r\n  return Boolean(descriptor?.set);\r\n}\r\n\r\nconst patchPropertiesSpecialCasesMap: Record<\r\n  string,\r\n  (element: NativeElement, attrName: string, attrValue: AttributeValue) => boolean\r\n> = {\r\n  input: (element: HTMLInputElement, attrName: string, attrValue: AttributeValue) => {\r\n    if (attrName === 'value') {\r\n      patches.push(() => {\r\n        detectIsBoolean(attrValue) ? (element.checked = attrValue) : (element.value = String(attrValue));\r\n      });\r\n    } else if (attrName === 'autoFocus') {\r\n      patches.push(() => {\r\n        element.autofocus = Boolean(attrValue);\r\n        element.autofocus && element.focus();\r\n      });\r\n    }\r\n\r\n    return false;\r\n  },\r\n  textarea: (element: HTMLTextAreaElement, attrName: string, attrValue: AttributeValue) => {\r\n    if (attrName === 'value') {\r\n      element.innerText = String(attrValue);\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n};\r\n\r\nfunction commitCreation(fiber: Fiber<NativeElement>) {\r\n  const parentFiber = getFiberWithElement<NativeElement, TagNativeElement>(fiber.parent);\r\n  const parentElement = parentFiber.element;\r\n  const childNodes = parentElement.childNodes;\r\n  const isHydrateZone = $$scope().getIsHydrateZone();\r\n\r\n  if (isHydrateZone) {\r\n    const nativeElement = childNodes[fiber.eidx] as NativeElement;\r\n\r\n    if (\r\n      detectIsTextVirtualNode(fiber.inst) &&\r\n      nativeElement instanceof Text &&\r\n      fiber.inst.value.length !== nativeElement.length\r\n    ) {\r\n      nativeElement.splitText(fiber.inst.value.length);\r\n    }\r\n\r\n    fiber.element = nativeElement;\r\n  } else {\r\n    if (!(fiber.mask & SHADOW_MASK)) {\r\n      if (childNodes.length === 0 || fiber.eidx > childNodes.length - 1) {\r\n        !detectIsVoidElement((parentFiber.inst as TagVirtualNode).name) &&\r\n          appendNativeElement(fiber.element, parentElement);\r\n      } else {\r\n        insertNativeElement(fiber.element, parentElement.childNodes[fiber.eidx], parentElement);\r\n      }\r\n    }\r\n  }\r\n\r\n  detectIsTagVirtualNode(fiber.inst) && addAttributes(fiber.element, fiber.inst, isHydrateZone);\r\n}\r\n\r\nfunction commitUpdate(fiber: Fiber<NativeElement>) {\r\n  const element = fiber.element;\r\n  const prevInstance = fiber.alt.inst as VirtualNode;\r\n  const nextInstance = fiber.inst as VirtualNode;\r\n\r\n  detectIsPlainVirtualNode(nextInstance)\r\n    ? (prevInstance as PlainVirtualNode).value !== nextInstance.value && (element.textContent = nextInstance.value)\r\n    : updateAttributes(element, prevInstance as TagVirtualNode, nextInstance as TagVirtualNode);\r\n}\r\n\r\nfunction commitDeletion(fiber: Fiber<NativeElement>) {\r\n  const parentFiber = getFiberWithElement<NativeElement, TagNativeElement>(fiber.parent);\r\n\r\n  if (fiber.mask & FLUSH_MASK) {\r\n    parentFiber.element.innerHTML && (parentFiber.element.innerHTML = '');\r\n    return;\r\n  }\r\n\r\n  walk<NativeElement>(fiber, (fiber, skip) => {\r\n    if (fiber.element) {\r\n      !detectIsPortal(fiber.inst) &&\r\n        canRemoveNativeElement(fiber.element, parentFiber.element) &&\r\n        removeNativeElement(fiber.element, parentFiber.element);\r\n      return skip();\r\n    }\r\n  });\r\n}\r\n\r\nfunction move(fiber: Fiber<NativeElement>) {\r\n  const sourceNodes = collectElements(fiber, x => x.element);\r\n  const sourceNode = sourceNodes[0];\r\n  const parentElement = sourceNode.parentElement;\r\n  const sourceFragment = new DocumentFragment();\r\n  const elementIdx = fiber.eidx;\r\n  let idx = 0;\r\n  const move = () => {\r\n    for (let i = 1; i < sourceNodes.length; i++) {\r\n      removeNativeElement(parentElement.childNodes[elementIdx + 1], parentElement);\r\n    }\r\n\r\n    replaceNativeElement(sourceFragment, parentElement.childNodes[elementIdx], parentElement);\r\n  };\r\n\r\n  for (const node of sourceNodes) {\r\n    insertNativeElement(document.createComment(`${elementIdx}:${idx}`), node, parentElement);\r\n    appendNativeElement(node, sourceFragment);\r\n    idx++;\r\n  }\r\n\r\n  moves.push(move);\r\n}\r\n\r\nconst commitMap: Record<string, (fiber: Fiber<NativeElement>) => void> = {\r\n  [CREATE_EFFECT_TAG]: (fiber: Fiber<NativeElement>) => {\r\n    if (!fiber.element || detectIsPortal(fiber.inst)) return;\r\n    trackUpdate && trackUpdate(fiber.element);\r\n    commitCreation(fiber);\r\n  },\r\n  [UPDATE_EFFECT_TAG]: (fiber: Fiber<NativeElement>) => {\r\n    fiber.mask & MOVE_MASK && (move(fiber), (fiber.mask &= ~MOVE_MASK));\r\n    if (!fiber.element || detectIsPortal(fiber.inst)) return;\r\n    trackUpdate && trackUpdate(fiber.element);\r\n    commitUpdate(fiber);\r\n  },\r\n  [DELETE_EFFECT_TAG]: commitDeletion,\r\n  [SKIP_EFFECT_TAG]: dummyFn,\r\n};\r\n\r\nfunction finishCommit() {\r\n  moves.forEach(x => x());\r\n  patches.forEach(x => x());\r\n  moves = [];\r\n  patches = [];\r\n}\r\n\r\nconst commit = (fiber: Fiber<NativeElement>) => commitMap[fiber.tag](fiber);\r\n\r\nconst setTrackUpdate = (fn: typeof trackUpdate) => (trackUpdate = fn);\r\n\r\nconst appendNativeElement = (element: NativeNode, parent: NativeNode) => parent.appendChild(element);\r\n\r\nconst insertNativeElement = (element: NativeNode, sibling: NativeNode, parent: TagNativeElement) =>\r\n  parent.insertBefore(element, sibling);\r\n\r\nconst insertNativeElementByIndex = (element: NativeNode, idx: number, parent: TagNativeElement) =>\r\n  parent.insertBefore(element, parent.childNodes[idx]);\r\n\r\nconst replaceNativeElement = (element: NativeNode, candidate: NativeNode, parent: TagNativeElement) =>\r\n  parent.replaceChild(element, candidate);\r\n\r\nconst canRemoveNativeElement = (element: NativeNode, parent: NativeNode) => element.parentElement === parent;\r\n\r\nconst removeNativeElement = (element: NativeNode, parent: TagNativeElement) => parent.removeChild(element);\r\n\r\nexport { createNativeElement, commit, finishCommit, setTrackUpdate, insertNativeElementByIndex };\r\n","import {\r\n  type DarkElement,\r\n  type Callback,\r\n  ROOT,\r\n  Fiber,\r\n  CREATE_EFFECT_TAG,\r\n  UPDATE_EFFECT_TAG,\r\n  platform,\r\n  flatten,\r\n  detectIsUndefined,\r\n  detectIsFunction,\r\n  trueFn,\r\n  TagVirtualNode,\r\n  TaskPriority,\r\n  createReplacer,\r\n  setRootId,\r\n  $$scope,\r\n  dummyFn,\r\n  scheduler,\r\n} from '@dark-engine/core';\r\n\r\nimport { createNativeElement, insertNativeElementByIndex, commit, finishCommit } from '../dom';\r\nimport { detectIsPortal, unmountPortal } from '../portal';\r\nimport type { TagNativeElement } from '../native-element';\r\n\r\nconst roots = new Map<Element, number>();\r\nconst raf = requestAnimationFrame.bind(window);\r\nconst caf = cancelAnimationFrame.bind(window);\r\nconst spawn = raf;\r\nlet isInjected = false;\r\n\r\nfunction inject() {\r\n  platform.createElement = createNativeElement as typeof platform.createElement;\r\n  platform.insertElement = insertNativeElementByIndex as typeof platform.insertElement;\r\n  platform.raf = raf;\r\n  platform.caf = caf;\r\n  platform.spawn = spawn;\r\n  platform.commit = commit;\r\n  platform.finishCommit = finishCommit;\r\n  platform.detectIsDynamic = trueFn;\r\n  platform.detectIsPortal = detectIsPortal;\r\n  platform.unmountPortal = unmountPortal;\r\n  platform.chunk = dummyFn;\r\n  isInjected = true;\r\n}\r\n\r\nfunction render(element: DarkElement, container: TagNativeElement, hydrate?: Callback) {\r\n  !isInjected && inject();\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (!(container instanceof Element)) {\r\n      throw new Error(`[Dark]: render receives only Element as container!`);\r\n    }\r\n  }\r\n\r\n  const isMounted = !detectIsUndefined(roots.get(container));\r\n  const isHydrate = detectIsFunction(hydrate);\r\n  let rootId: number = null;\r\n\r\n  if (!isMounted) {\r\n    rootId = roots.size;\r\n    roots.set(container, rootId);\r\n    !isHydrate && (container.innerHTML = '');\r\n  } else {\r\n    rootId = roots.get(container);\r\n  }\r\n\r\n  const $scope = $$scope(rootId);\r\n\r\n  // insertion effect can't schedule renders\r\n  if ($scope?.getIsInsertionEffectsZone()) return;\r\n\r\n  const callback = () => {\r\n    setRootId(rootId); // !\r\n    const $scope = $$scope();\r\n    const rootFiber = $scope.getRoot();\r\n    const isUpdate = Boolean(rootFiber);\r\n    const fiber = new Fiber().mutate({\r\n      element: container,\r\n      inst: new TagVirtualNode(ROOT, {}, flatten([element || createReplacer()]) as TagVirtualNode['children']),\r\n      alt: rootFiber,\r\n      tag: isUpdate ? UPDATE_EFFECT_TAG : CREATE_EFFECT_TAG,\r\n    });\r\n\r\n    $scope.resetMount();\r\n    $scope.setWorkInProgress(fiber);\r\n    $scope.setIsHydrateZone(isHydrate);\r\n    $scope.setNextUnitOfWork(fiber);\r\n    isHydrate && hydrate();\r\n  };\r\n\r\n  scheduler.schedule(callback, { priority: TaskPriority.NORMAL });\r\n}\r\n\r\nexport { render, roots, inject };\r\n","import {\r\n  type WritableAtom,\r\n  Text,\r\n  TagVirtualNode,\r\n  TextVirtualNode,\r\n  Flag,\r\n  component,\r\n  memo,\r\n  useMemo,\r\n  atom,\r\n} from '@dark-engine/core';\r\nimport { type SyntheticEvent as E, createRoot, table, tbody, div, button } from '@dark-engine/platform-browser';\r\n\r\nconst createMeasurer = () => {\r\n  let startTime: number;\r\n  let lastMeasureName: string;\r\n  const start = (name: string) => {\r\n    startTime = performance.now();\r\n    lastMeasureName = name;\r\n  };\r\n  const stop = () => {\r\n    const last = lastMeasureName;\r\n\r\n    if (lastMeasureName) {\r\n      setTimeout(() => {\r\n        lastMeasureName = null;\r\n        const stopTime = performance.now();\r\n        const diff = stopTime - startTime;\r\n\r\n        console.log(`${last}: ${diff}`);\r\n      });\r\n    }\r\n  };\r\n\r\n  return {\r\n    start,\r\n    stop,\r\n  };\r\n};\r\n\r\nconst measurer = createMeasurer();\r\n\r\nlet nextId = 0;\r\nconst buildData = (count, prefix = ''): Array<DataItem> => {\r\n  return Array(count)\r\n    .fill(0)\r\n    .map(() => ({\r\n      id: ++nextId,\r\n      name$: atom(`item: ${nextId} ${prefix}`),\r\n    }));\r\n};\r\n\r\ntype DataItem = { id: number; name$: WritableAtom<string> };\r\n\r\ntype HeaderProps = {\r\n  onCreate: (e: E<MouseEvent>) => void;\r\n  onPrepend: (e: E<MouseEvent>) => void;\r\n  onAppend: (e: E<MouseEvent>) => void;\r\n  onInsertDifferent: (e: E<MouseEvent>) => void;\r\n  onUpdateAll: (e: E<MouseEvent>) => void;\r\n  onSwap: (e: E<MouseEvent>) => void;\r\n  onClear: (e: E<MouseEvent>) => void;\r\n};\r\n\r\nconst Header = component<HeaderProps>(\r\n  ({ onCreate, onPrepend, onAppend, onInsertDifferent, onUpdateAll, onSwap, onClear }) => {\r\n    return div({\r\n      style:\r\n        'width: 100%; height: 64px; background-color: blueviolet; display: flex; align-items: center; padding: 16px;',\r\n      slot: [\r\n        button({\r\n          slot: Text('create 10000 rows'),\r\n          onClick: onCreate,\r\n        }),\r\n        button({\r\n          slot: Text('Prepend 1000 rows'),\r\n          onClick: onPrepend,\r\n        }),\r\n        button({\r\n          slot: Text('Append 1000 rows'),\r\n          onClick: onAppend,\r\n        }),\r\n        button({\r\n          slot: Text('insert different'),\r\n          onClick: onInsertDifferent,\r\n        }),\r\n        button({\r\n          slot: Text('update every 10th row'),\r\n          onClick: onUpdateAll,\r\n        }),\r\n        button({\r\n          slot: Text('swap rows'),\r\n          onClick: onSwap,\r\n        }),\r\n        button({\r\n          slot: Text('clear rows'),\r\n          onClick: onClear,\r\n        }),\r\n      ],\r\n    });\r\n  },\r\n);\r\n\r\nconst MemoHeader = memo(Header, () => false);\r\n\r\ntype NameProps = {\r\n  name$: WritableAtom<string>;\r\n};\r\n\r\nconst Name = component<NameProps>(({ name$ }) => new TextVirtualNode(name$.val()));\r\n\r\ntype RowProps = {\r\n  id: number;\r\n  name$: WritableAtom<string>;\r\n  selected$: WritableAtom<number>;\r\n  onRemove: (id: number, e: E<MouseEvent>) => void;\r\n  onHighlight: (id: number, e: E<MouseEvent>) => void;\r\n};\r\n\r\nconst Row = component<RowProps>(({ id, selected$, name$, onRemove, onHighlight }) => {\r\n  return new TagVirtualNode(\r\n    'tr',\r\n    {\r\n      class: selected$.val(null, id) === id ? 'selected' : undefined,\r\n      [Flag.STATIC_SLOT_OPT]: true,\r\n    },\r\n    [\r\n      new TagVirtualNode('td', {}, [Name({ name$ })]),\r\n      new TagVirtualNode('td', {}, [new TextVirtualNode('qqq')]),\r\n      new TagVirtualNode('td', {}, [new TextVirtualNode('xxx')]),\r\n      new TagVirtualNode('td', {}, [\r\n        new TagVirtualNode('button', { onClick: [onRemove, id] }, [new TextVirtualNode('remove')]),\r\n        new TagVirtualNode('button', { onClick: [onHighlight, id] }, [new TextVirtualNode('highlight')]),\r\n      ]),\r\n    ],\r\n  );\r\n});\r\n\r\nconst MemoRow = memo(Row, () => false);\r\n\r\ntype State = {\r\n  data$: WritableAtom<Array<DataItem>>;\r\n  selected$: WritableAtom<number>;\r\n};\r\n\r\nconst App = component(() => {\r\n  const state = useMemo<State>(() => ({ data$: atom([]), selected$: atom() }), []);\r\n  const { data$, selected$ } = state;\r\n  const items = data$.val();\r\n\r\n  const handleCreate = (e: E<MouseEvent>) => {\r\n    measurer.start('create');\r\n    e.stopPropagation();\r\n    data$.set(buildData(10000));\r\n    measurer.stop();\r\n  };\r\n  const handlePrepend = (e: E<MouseEvent>) => {\r\n    measurer.start('prepend');\r\n    e.stopPropagation();\r\n    const data = data$.get();\r\n    data.unshift(...buildData(1000, '^^^'));\r\n    data$.set(data);\r\n    measurer.stop();\r\n  };\r\n  const handleAppend = (e: E<MouseEvent>) => {\r\n    measurer.start('append');\r\n    e.stopPropagation();\r\n    const data = data$.get();\r\n    data.push(...buildData(1000, '^^^'));\r\n    data$.set(data);\r\n    measurer.stop();\r\n  };\r\n  const handleInsertDifferent = (e: E<MouseEvent>) => {\r\n    measurer.start('insert different');\r\n    e.stopPropagation();\r\n    const data = data$.get();\r\n    data.splice(0, 0, ...buildData(5, '***'));\r\n    data.splice(8, 0, ...buildData(2, '***'));\r\n    data$.set(data);\r\n    measurer.stop();\r\n  };\r\n  const handleUpdateAll = (e: E<MouseEvent>) => {\r\n    measurer.start('update every 10th');\r\n    e.stopPropagation();\r\n    const data = data$.get();\r\n\r\n    for (let i = 0; i < data.length; i += 10) {\r\n      data[i].name$.set(x => x + '!!!');\r\n    }\r\n    measurer.stop();\r\n  };\r\n  const handleRemove = (id: number, e: E<MouseEvent>) => {\r\n    measurer.start('remove');\r\n    e.stopPropagation();\r\n    const data = data$.get();\r\n    const idx = data.findIndex(x => x.id === id);\r\n    idx !== -1 && data.splice(idx, 1);\r\n    data$.set(data);\r\n    measurer.stop();\r\n  };\r\n  const handleHightlight = (id: number, e: E<MouseEvent>) => {\r\n    measurer.start('highlight');\r\n    e.stopPropagation();\r\n    selected$.set(id);\r\n    measurer.stop();\r\n  };\r\n  const handleSwap = (e: E<MouseEvent>) => {\r\n    const data = data$.get();\r\n    if (data.length === 0) return;\r\n    measurer.start('swap');\r\n    e.stopPropagation();\r\n    const temp = data[1];\r\n    data[1] = data[data.length - 2];\r\n    data[data.length - 2] = temp;\r\n    data$.set(data);\r\n    measurer.stop();\r\n  };\r\n  const handleClear = (e: E<MouseEvent>) => {\r\n    measurer.start('clear');\r\n    e.stopPropagation();\r\n    data$.set([]);\r\n    measurer.stop();\r\n  };\r\n\r\n  return [\r\n    MemoHeader({\r\n      onCreate: handleCreate,\r\n      onPrepend: handlePrepend,\r\n      onAppend: handleAppend,\r\n      onInsertDifferent: handleInsertDifferent,\r\n      onUpdateAll: handleUpdateAll,\r\n      onSwap: handleSwap,\r\n      onClear: handleClear,\r\n    }),\r\n    table({\r\n      class: 'table',\r\n      slot: tbody({\r\n        key: items.length > 0 ? 1 : 2,\r\n        [Flag.MEMO_SLOT_OPT]: true,\r\n        slot: items.map(item => {\r\n          const { id, name$ } = item;\r\n\r\n          return MemoRow({\r\n            key: id,\r\n            id,\r\n            name$,\r\n            selected$,\r\n            onRemove: handleRemove,\r\n            onHighlight: handleHightlight,\r\n          });\r\n        }),\r\n      }),\r\n    }),\r\n  ];\r\n});\r\n\r\ncreateRoot(document.getElementById('root')).render(App());\r\n","import { type DarkElement, unmountRoot } from '@dark-engine/core';\r\n\r\nimport { render, roots } from '../render';\r\nimport type { TagNativeElement } from '../native-element';\r\n\r\nfunction createRoot(container: TagNativeElement) {\r\n  return {\r\n    render: (element: DarkElement) => render(element, container),\r\n    unmount: () => unmount(container),\r\n  };\r\n}\r\n\r\nfunction unmount(container: TagNativeElement) {\r\n  const rootId = roots.get(container);\r\n\r\n  unmountRoot(rootId, () => {\r\n    roots.delete(container);\r\n    container.innerHTML = '';\r\n  });\r\n}\r\n\r\nexport { createRoot, unmount };\r\n"],"names":["ROOT","REPLACER","KEY_ATTR","REF_ATTR","CREATE_EFFECT_TAG","UPDATE_EFFECT_TAG","SKIP_EFFECT_TAG","MOVE_MASK","TaskPriority","Flag","ATTR_BLACK_LIST","SKIP_SCAN_OPT","MEMO_SLOT_OPT","STATIC_SLOT_OPT","detectIsFunction","o","detectIsUndefined","detectIsTextBased","detectIsObject","detectIsBoolean","detectIsArray","Array","isArray","detectIsNull","detectIsEmpty","getTime","Date","now","dummyFn","trueFn","sameFn","x","flatten","source","transform","length","list","stack","idx","pop","i","push","prevDeps","nextDeps","max","Math","Object","is","createIndexKey","defaultRealisation","Error","platform","createElement","insertElement","raf","caf","spawn","commit","finishCommit","detectIsDynamic","detectIsPortal","unmountPortal","chunk","EventEmitter","subscribers","Map","on","e","fn","this","has","set","Set","get","add","delete","emit","data","forEach","kill","__getSize","size","Scope","root","wip","cursor","unit","mountDeep","mountLevel","mountNav","events","unsubs","actions","candidates","deletions","cancels","asyncEffects","layoutEffects","insertionEffects","resourceId","resources","defers","setPendingStatus","isLayoutEffectsZone","isInsertionEffectsZone","isUpdateZone","isBatchZone","isHydrateZone","isStreamZone","isTransitionZone","isEventZone","isHot","isDynamic","isServer","emitter","resetActions","getActionsById","id","addActionMap","map","replace","insert","remove","move","stable","addReplaceAction","nextKey","addInsertAction","addRemoveAction","prevKey","addMoveAction","addStableAction","copy","scope","getRoot","setRoot","fiber","getWorkInProgress","setWorkInProgress","getNextUnitOfWork","setNextUnitOfWork","getCursorFiber","setCursorFiber","navToChild","navToSibling","navToParent","navToPrev","getMountIndex","setMountDeep","getMountDeep","value","resetMount","getEvents","addEventUnsubscriber","unsubscribeEvents","getCandidates","addCandidate","resetCandidates","getDeletions","hasDeletion","nextFiber","parent","addDeletion","resetDeletions","addAsyncEffect","resetAsyncEffects","runAsyncEffects","effects","setTimeout","addLayoutEffect","resetLayoutEffects","runLayoutEffects","setIsLayoutEffectsZone","addInsertionEffect","resetInsertionEffects","runInsertionEffects","setIsInsertionEffectsZone","addCancel","applyCancels","resetCancels","getIsLayoutEffectsZone","getIsInsertionEffectsZone","getIsUpdateZone","setIsUpdateZone","getIsBatchZone","setIsBatchZone","getIsHydrateZone","setIsHydrateZone","getIsStreamZone","setIsStreamZone","getIsTransitionZone","setIsTransitionZone","getIsEventZone","setIsEventZone","getIsHot","setIsHot","getPendingStatusSetter","setPendingStatusSetter","flush","getEmitter","defer","getDefers","resetDefers","getResource","setResource","res","getResources","getResourceId","setResourceId","getNextResourceId","runAfterCommit","rootId","scopes","getRootId","setRootId","$$scope","$$inject","Symbol","Component","constructor","type","token","props","ref","shouldUpdate","displayName","children","component","options","$token","factory","defaultInject","detectIsComponent","$$vNode","ATTR_TYPE","VirtualNode","TagVirtualNode","name","attrs","super","NodeType","TAG","TextVirtualNode","TEXT","String","CommentVirtualNode","text","COMMENT","from","detectIsTextVirtualNode","detectIsVirtualNode","vNode","detectIsTagVirtualNode","detectIsCommentVirtualNode","detectIsVirtualNodeFactory","detectIsPlainVirtualNode","createReplacer","getElementKey","inst","getVirtualNodeFactoryKey","hasElementFlag","flag","Boolean","hasComponentFlag","hasVirtualNodeFactoryFlag","hasTagVirtualNodeFlag","getElementType","hasChildrenProp","detectAreSameInstanceTypes","prevInst","nextInst","isComponentFactories","nc","Fiber","hook","provider","cc","cec","eidx","mask","element","tag","child","next","alt","atoms","nextId","mutate","keys","key","markHost","increment","count","force","$scope","wipFiber","stop","setError","error","catch","static","Hook","values","owner","$$memo","defaultShouldUpdate","nextProps","memo","detectIsMemo","instance","walk","onWalk","shouldDeep","shouldStop","skip","getFiberWithElement","$fiber","buildChildNodes","onNode","getKey","buildChildNode","altMap","startEidx","prevIdx","nextIdx","left","right","isFirst","isLast","notifyParents","MessageChannel","port1","port2","MessagePort","channel","offs","event","callback","off","postMessage","unref","Task","priority","forceAsync","taskRestorer","pendingSetter","nextTaskId","getPriority","getForceAsync","setIsTransition","isTransition","getIsTransition","run","pending","markAsPending","isPending","canPending","markAsUnnecessary","isUnnecessary","getIsUnnecessary","setTaskRestorer","setLocationCreator","locationCreator","createLocation","setPendingSetter","loc","tasks","deep","$loc","split","some","$$loc","indexOf","createRootLocation","scheduler","queue","HIGH","NORMAL","LOW","deadline","task","scheduledCallback","isMessageLoopRunning","port","performWorkUntilDeadline","bind","reset","shouldYield","schedule","put","execute","hasPrimaryTask","high","normal","low","getQueues","hasPrimary","hasLow","detectHasRelatedUpdate","cancelTask","complete","filter","splice","pick","shift","Promise","resolve","then","requestCallbackAsync","workLoop","requestCallback","isBusy","detectIsBusy","hasMoreWork","unshift","$$fragment","Fragment","slot","Memo","getValue","p","n","deps","state","$value","detectIsElement","$$useEffect","createEffect","useEffect","effect","cleanup","undefined","isInsertionEffect","EffectType","INSERTION","isLayoutEffect","LAYOUT","isAsyncEffect","ASYNC","runEffect","dropEffects","$$useLayoutEffect","dropLayoutEffects","$$useInsertionEffect","useInsertionEffect","dropInsertionEffects","shouldUnmountFiber","INSERTION_EFFECT_HOST_MASK","unmountFiber","_","hasPendingPromise","hasRenderError","isAsync","performUnitOfWork","fork","unmounts","diff","parentFiber","isRight","sync","err","finally","isDeepWalking","isStream","hasChildren","$inst","createFiber","getAlternate","share","mountChild","mountSibling","prev","shouldMount","pc","mount","hasSameCount","prevKeys","nextKeys","prevKeysMap","nextKeysMap","keyedFibersMap","usedKeysMap","extractKeys","prevKeyFiber","tryOptStaticSlot","hasMove","hasRemove","hasInsert","hasReplace","detectIsStableMemoTree","tryOptMov","tryOptRem","tryOptMemoSlot","reconcile","isUpdate","setup","detectAreSameComponentTypesWithSameKeys","getHook","fromChild","parentId","isMove","isStable","isComponent","result","promise","all","setNextId","args","console","supportConditional","cancel","$$scope$","setValue","resetValue","assign","replaceScope","$createChanger","Atom","val","__connect","connections1","__","___","connections2","subjects","toString","toJSON","valueOf","disconnect","__addSubject","atom$","__removeSubject","make","tuple","createChanger","restore","fromRestore","detectIsFiberAlive","createUpdate","__notify","WritableAtom","atom","as","_void","View","div","table","tbody","applyRef","current","mutableRef","hasOwnProperty","detectIsMutableRef","$$portal","container","innerHTML","getPortalContainer","SyntheticEvent","sourceEvent","target","propagation","stopPropagation","preventDefault","getPropagation","delegateEvent","eventName","handler","eventsMap","handlersMap","$handler","slice","rootHandler","$event","parentElement","dispatchEvent","WeakMap","document","addEventListener","removeEventListener","detectIsEvent","attrName","startsWith","getEventName","toLowerCase","STYLE_ATTR","CLASS_ATTR","CLASS_NAME_ATTR","moves","patches","svgTagNames","voidTagNames","createNativeElementMap","detectIsSvgElement","createElementNS","createTextNode","createComment","createNativeElement","node","setObjectStyle","style","setProperty","toggleAttribute","setAttribute","removeAttribute","patchProperties","tagName","attrValue","patchPropertiesSpecialCasesMap","prototype","getPrototypeOf","descriptor","getOwnPropertyDescriptor","canSetProperty","includes","input","checked","autofocus","focus","textarea","innerText","commitMap","childNodes","nativeElement","Text","splitText","appendNativeElement","insertNativeElement","attrNames","tagElement","addAttributes","commitCreation","sourceNodes","elements","collectElements","sourceFragment","DocumentFragment","elementIdx","removeNativeElement","replaceNativeElement","prevInstance","nextInstance","textContent","prevNode","nextNode","prevAttrs","nextAttrs","getAttributeNames","prevAttrValue","nextAttrValue","updateAttributes","commitUpdate","canRemoveNativeElement","appendChild","sibling","insertBefore","insertNativeElementByIndex","candidate","replaceChild","removeChild","roots","requestAnimationFrame","window","cancelAnimationFrame","isInjected","measurer","startTime","lastMeasureName","start","performance","last","log","createMeasurer","buildData","prefix","fill","name$","MemoHeader","onCreate","onPrepend","onAppend","onInsertDifferent","onUpdateAll","onSwap","onClear","onClick","Name","MemoRow","selected$","onRemove","onHighlight","class","App","data$","items","handleRemove","findIndex","handleHightlight","temp","item","getElementById","render","hydrate","isMounted","isHydrate","rootFiber","unmount","onCompleted","unmountRoot"],"sourceRoot":""}